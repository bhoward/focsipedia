(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{127:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return r})),t.d(a,"metadata",(function(){return i})),t.d(a,"rightToc",(function(){return p})),t.d(a,"default",(function(){return o}));var n=t(1),s=t(6),c=(t(0),t(159)),r=(t(160),{id:"types",title:"Types in Functional Programming"}),i={id:"fp/types",title:"Types in Functional Programming",description:"import useBaseUrl from '@docusaurus/useBaseUrl';",source:"@site/docs/fp/types.md",permalink:"/focsipedia/docs/fp/types",editUrl:"https://github.com/bhoward/focsipedia/edit/master/docs/fp/types.md",sidebar:"someSidebar",previous:{title:"Introduction to Functional Programming",permalink:"/focsipedia/docs/fp/intro"},next:{title:"ReasonML",permalink:"/focsipedia/docs/reason"}},p=[{value:"Functions",id:"functions",children:[]},{value:"Type Inference",id:"type-inference",children:[{value:"Currying",id:"currying",children:[]}]},{value:"Tuples",id:"tuples",children:[{value:"Tuples and Parameters",id:"tuples-and-parameters",children:[]}]},{value:"Records and Variants",id:"records-and-variants",children:[{value:"Pattern Matching",id:"pattern-matching",children:[]},{value:"Recursive Types",id:"recursive-types",children:[]}]},{value:"Connection to Natural Deduction",id:"connection-to-natural-deduction",children:[]},{value:"Exercises",id:"exercises",children:[]}],b={rightToc:p},m="wrapper";function o(e){var a=e.components,t=Object(s.a)(e,["components"]);return Object(c.b)(m,Object(n.a)({},b,t,{components:a,mdxType:"MDXLayout"}),Object(c.b)("p",null,"One of the hallmarks of modern functional programming is a strong and rich\nsystems of types. The type of an expression can be thought of as the set of all\nvalues that the expression might have; by specifying the type of a parameter to\na function, it constrains the values that may be provided as input. In this\nsense, the type of a function is then a form of contract: if the input satisfies\nsome condition (is a value in the parameter type), then the output is also\nguaranteed to satisfy a condition (be a value of the result type)."),Object(c.b)("h2",{id:"functions"},"Functions"),Object(c.b)("p",null,"In ReasonML we write the type of functions from ",Object(c.b)("inlineCode",{parentName:"p"},"A")," to ",Object(c.b)("inlineCode",{parentName:"p"},"B")," as ",Object(c.b)("inlineCode",{parentName:"p"},"A => B"),". Given a\nfunction ",Object(c.b)("inlineCode",{parentName:"p"},"f")," of that type, if ",Object(c.b)("inlineCode",{parentName:"p"},"x")," is a value (or more generally any expression)\nof type ",Object(c.b)("inlineCode",{parentName:"p"},"A"),", then the ",Object(c.b)("strong",{parentName:"p"},"application")," ",Object(c.b)("inlineCode",{parentName:"p"},"f(x)")," will give us a result of type ",Object(c.b)("inlineCode",{parentName:"p"},"B"),".\nThe value ",Object(c.b)("inlineCode",{parentName:"p"},"x")," to which we apply the function is known as the ",Object(c.b)("strong",{parentName:"p"},"argument"),".\nFor example, ",Object(c.b)("inlineCode",{parentName:"p"},"string_of_int")," is a function of type ",Object(c.b)("inlineCode",{parentName:"p"},"int => string"),"; when we\napply it to an integer, it returns the string of digits representing the argument:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let result = string_of_int(42);\n")),Object(c.b)("p",null,"Since functions are first-class values, we may bind a function to another name:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let f = string_of_int;\nlet result = f(42);\n")),Object(c.b)("div",{className:"admonition admonition-warning"},Object(c.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(c.b)("h5",{parentName:"div"},Object(c.b)("div",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(c.b)("svg",Object(n.a)({parentName:"div"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(c.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})))),"warning")),Object(c.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(c.b)("p",{parentName:"div"},"Because the embedded ReasonML compiler here is first converting the code to\nOCaml, and then executing the OCaml code, it actually reports types using the\nOCaml syntax, which is slightly different! For example, OCaml uses a single\narrow ",Object(c.b)("inlineCode",{parentName:"p"},"->")," for function types instead of the double arrow ",Object(c.b)("inlineCode",{parentName:"p"},"=>"),". This is\nunfortunate, but as we will see below we rarely even need to write types."))),Object(c.b)("p",null,"To create a function value, we use the double arrow to show that we are taking\na parameter, for example ",Object(c.b)("inlineCode",{parentName:"p"},"p"),", and using it to compute a result:\n",Object(c.b)("inlineCode",{parentName:"p"},"p => { ...result expression... }"),". The parameter may be any variable name","\u2014",'it\nwill represent the value of the argument just within the block containing the\nresult expressions. That is, if the variable name had been used outside the function,\nit will be temporarily "shadowed" by the new binding; when the function has returned\nits result, the local binding to the argument goes away.'),Object(c.b)("p",null,"Consider the following example:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let x = 5;\nlet f = x => { x + 12 };\nlet y = f(x * x) + x;\n")),Object(c.b)("p",null,"The first binding to ",Object(c.b)("inlineCode",{parentName:"p"},"x")," is the integer 5. When ",Object(c.b)("inlineCode",{parentName:"p"},"f")," is applied to its argument,\nwhich is ",Object(c.b)("inlineCode",{parentName:"p"},"x * x"),", or 25, we will temporarily bind 25 to a new, local variable\nnamed ",Object(c.b)("inlineCode",{parentName:"p"},"x")," and evaluate the body of the function: ",Object(c.b)("inlineCode",{parentName:"p"},"x + 12"),", which gives 37.\nContinuing to evaluate the expression ",Object(c.b)("inlineCode",{parentName:"p"},"f(x * x) + x"),", we now have ",Object(c.b)("inlineCode",{parentName:"p"},"37 + x"),"; since\n",Object(c.b)("inlineCode",{parentName:"p"},"x")," here refers to the original binding, this is ",Object(c.b)("inlineCode",{parentName:"p"},"37 + 5"),", so it binds 42 to ",Object(c.b)("inlineCode",{parentName:"p"},"y"),"."),Object(c.b)("h2",{id:"type-inference"},"Type Inference"),Object(c.b)("p",null,"ReasonML does not require that we specify the types of variables most of the\ntime, because it can usually infer what types they should have from the context\nand how they are used. Looking at the example above, since 5 is an int, we know\nthat ",Object(c.b)("inlineCode",{parentName:"p"},"x")," must have type ",Object(c.b)("inlineCode",{parentName:"p"},"int"),". In the second line, the local ",Object(c.b)("inlineCode",{parentName:"p"},"x")," must also be an\n",Object(c.b)("inlineCode",{parentName:"p"},"int"),", since we can add 12 to it.",Object(c.b)("sup",Object(n.a)({parentName:"p"},{id:"fnref-1"}),Object(c.b)("a",Object(n.a)({parentName:"sup"},{href:"#fn-1",className:"footnote-ref"}),"1"))," The result of the function body will be an ",Object(c.b)("inlineCode",{parentName:"p"},"int"),", so\nthe type of ",Object(c.b)("inlineCode",{parentName:"p"},"f")," is ",Object(c.b)("inlineCode",{parentName:"p"},"int => int"),". Finally, the application of ",Object(c.b)("inlineCode",{parentName:"p"},"f")," in the third line\nchecks out, because it is applied to an integer argument (",Object(c.b)("inlineCode",{parentName:"p"},"x * x"),"), and its result\nis used in a further integer addition. We could be explicit about the types and\nadd a ",Object(c.b)("strong",{parentName:"p"},"type annotation")," to each of the bindings:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let x: int = 5;\nlet f: int => int = (x: int) => { x + 12 };\nlet y: int = f(x * x) + x;\nlet z: string = string_of_int(y);\n")),Object(c.b)("p",null,"However, the convention in ReasonML is that type annotations are not generally\nused except as documentation and as a check that the compiler is doing what we\nthink it is."),Object(c.b)("h3",{id:"currying"},"Currying"),Object(c.b)("p",null,"When we write a function that takes multiple arguments, we may list the parameters\nin parentheses, separated by commas:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let average = (a, b) => { float_of_int(a + b) /. 2.0 };\nlet result = average(7, 10);\n")),Object(c.b)("p",null,"This is actually a lie! In ReasonML, functions can only have a single argument.\nBehind the scenes, the code above is translated to the following:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let average = a => { b => { float_of_int(a + b) /. 2.0 } };\nlet result = average(7)(10);\n")),Object(c.b)("p",null,"That is, ",Object(c.b)("inlineCode",{parentName:"p"},"average")," is a function that takes an integer parameter ",Object(c.b)("inlineCode",{parentName:"p"},"a")," and returns\nanother function. This second function expects to be given another integer\nparameter, named ",Object(c.b)("inlineCode",{parentName:"p"},"b"),", and then it will compute the result (which is a ",Object(c.b)("inlineCode",{parentName:"p"},"float"),"\nfor variety). The computation on the second line corresponds to this: first\n",Object(c.b)("inlineCode",{parentName:"p"},"average")," is applied to the argument 7. The resulting function is then further\napplied to the argument 10, producing the desired floating-point result."),Object(c.b)("p",null,"Here is the same code, written out more explicitly:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let average: int => (int => float) = (a: int) => {\n  (b: int) => {\n    float_of_int(a + b) /. 2.0\n  }\n};\nlet result1: int => float = average(7);\nlet result: float = result1(10);\n")),Object(c.b)("p",null,"This replacement of multiple-parameter functions with a sequence of single-parameter\nfunctions is called ",Object(c.b)("strong",{parentName:"p"},"currying"),", named after the logician Haskell B. Curry.",Object(c.b)("sup",Object(n.a)({parentName:"p"},{id:"fnref-2"}),Object(c.b)("a",Object(n.a)({parentName:"sup"},{href:"#fn-2",className:"footnote-ref"}),"2"))," One advantage of this,\nother than the simplicity of only needing one kind of function, is that it is often\nuseful to create a ",Object(c.b)("strong",{parentName:"p"},"partially applied")," function, where some of its arguments have\nbeen supplied to create a new function ready to be given the rest. For example, suppose\nwe have a function for formatting exam grades:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'let format_grade = (exam, total, name, points) => {\n  name ++ ", " ++ exam ++ ": " ++ string_of_int(points) ++ "/" ++ string_of_int(total) \n};\nlet demo = format_grade("Midterm", 100, "Brian", 93);\n')),Object(c.b)("p",null,"We could take advantage of currying to create a specialized function for formatting the\nmidterm grades:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'let format_midterm = format_grade("Midterm", 100);\nlet demo1 = format_midterm("Brian", 93);\nlet demo2 = format_midterm("Alice", 97);\n')),Object(c.b)("p",null,"The first two arguments of ",Object(c.b)("inlineCode",{parentName:"p"},"format_grade"),' have been provided with the exam name\n("Midterm") and the total number of points (100). Now we have a new function,\nbound to ',Object(c.b)("inlineCode",{parentName:"p"},"format_midterm"),", that just needs to be applied to a student name and\ngrade, and then it can produce a string with all four components."),Object(c.b)("h2",{id:"tuples"},"Tuples"),Object(c.b)("p",null,"Perhaps the most basic form of data structure is the ",Object(c.b)("strong",{parentName:"p"},"tuple"),". We have already\nseen this in the context of\n",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"../sets/functions#pairs"}),"sets and cartesian products"),": an ",Object(c.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(c.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(c.b)("semantics",{parentName:"math"},Object(c.b)("mrow",{parentName:"semantics"},Object(c.b)("mi",{parentName:"mrow"},"n")),Object(c.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"n")))),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"n"))))),"-tuple is simply\nan ordered listing of ",Object(c.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(c.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(c.b)("semantics",{parentName:"math"},Object(c.b)("mrow",{parentName:"semantics"},Object(c.b)("mi",{parentName:"mrow"},"n")),Object(c.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"n")))),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"n")))))," values, traditionally shown in parentheses separated\nby commas. The ReasonML syntax for a tuple type is likewise an ordered listing\nof each value's type, in parentheses and separated by commas. For example, the\ntuple ",Object(c.b)("inlineCode",{parentName:"p"},'(42, "hello", 3.1416)')," has type ",Object(c.b)("inlineCode",{parentName:"p"},"(int, string, float)"),":"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'let demo: (int, string, float) = (42, "hello", 3.1416);\n')),Object(c.b)("div",{className:"admonition admonition-warning"},Object(c.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(c.b)("h5",{parentName:"div"},Object(c.b)("div",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(c.b)("svg",Object(n.a)({parentName:"div"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(c.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})))),"warning")),Object(c.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(c.b)("p",{parentName:"div"},"Again the OCaml syntax differs from the ReasonML syntax, so you will see tuple\ntypes printed out with the types separated by asterisks: ",Object(c.b)("inlineCode",{parentName:"p"},"int * string * float"),"\ninstead of ",Object(c.b)("inlineCode",{parentName:"p"},"(int, string, float)"),". In OCaml they chose to make it look more like\na cartesian product, while ReasonML is trying to make the type look like the\nvalues it describes."))),Object(c.b)("p",null,"In the case ",Object(c.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(c.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(c.b)("semantics",{parentName:"math"},Object(c.b)("mrow",{parentName:"semantics"},Object(c.b)("mi",{parentName:"mrow"},"n"),Object(c.b)("mo",{parentName:"mrow"},"="),Object(c.b)("mn",{parentName:"mrow"},"2")),Object(c.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"n=2")))),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"n"),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"="),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"2"))))),", a tuple is just the familiar ",Object(c.b)("strong",{parentName:"p"},"pair"),". For example, the type\nof two-dimensional points with integer coordinates is ",Object(c.b)("inlineCode",{parentName:"p"},"(int, int)"),". Pairs come\nwith accessor functions named ",Object(c.b)("inlineCode",{parentName:"p"},"fst")," and ",Object(c.b)("inlineCode",{parentName:"p"},"snd")," to access the first and second\ncoordinates, respectively:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let p = (5, 10);\nlet x = fst(p);\nlet y = snd(p);\n")),Object(c.b)("p",null,"The standard library does not provide accessor functions for arbitrary\n",Object(c.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(c.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(c.b)("semantics",{parentName:"math"},Object(c.b)("mrow",{parentName:"semantics"},Object(c.b)("mi",{parentName:"mrow"},"n")),Object(c.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"n")))),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"n"))))),"-tuples.",Object(c.b)("sup",Object(n.a)({parentName:"p"},{id:"fnref-3"}),Object(c.b)("a",Object(n.a)({parentName:"sup"},{href:"#fn-3",className:"footnote-ref"}),"3"))," Instead, we may retrieve\nthe components of a tuple through an extension of the binding operation, ",Object(c.b)("inlineCode",{parentName:"p"},"let"),":"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'let demo = (42, "hello", 3.1416); /* construct a tuple */\nlet (a, b, c) = demo;             /* "destruct" a tuple */\n')),Object(c.b)("p",null,"If we only want to extract some of the components, the other positions may be\nfilled with a place-holder, the so-called ",Object(c.b)("strong",{parentName:"p"},"wildcard")," identifier, ",Object(c.b)("inlineCode",{parentName:"p"},"_"),"\n(underscore):"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'let demo = (42, "hello", 3.1416);\nlet (_, greeting, _) = demo;\n')),Object(c.b)("p",null,"An ",Object(c.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(c.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(c.b)("semantics",{parentName:"math"},Object(c.b)("mrow",{parentName:"semantics"},Object(c.b)("mi",{parentName:"mrow"},"n")),Object(c.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"n")))),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"n"))))),"-tuple when ",Object(c.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(c.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(c.b)("semantics",{parentName:"math"},Object(c.b)("mrow",{parentName:"semantics"},Object(c.b)("mi",{parentName:"mrow"},"n"),Object(c.b)("mo",{parentName:"mrow"},"="),Object(c.b)("mn",{parentName:"mrow"},"1")),Object(c.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"n=1")))),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"n"),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"="),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"1")))))," is just an ordinary value (which may be enclosed in\nparentheses as usual just for grouping purposes). However, the case when\n",Object(c.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(c.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(c.b)("semantics",{parentName:"math"},Object(c.b)("mrow",{parentName:"semantics"},Object(c.b)("mi",{parentName:"mrow"},"n"),Object(c.b)("mo",{parentName:"mrow"},"="),Object(c.b)("mn",{parentName:"mrow"},"0")),Object(c.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"n=0")))),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"n"),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"="),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"0")))))," is more interesting: the only value is the empty tuple, ",Object(c.b)("inlineCode",{parentName:"p"},"()"),", and its type\nis named ",Object(c.b)("inlineCode",{parentName:"p"},"unit"),":"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let a: unit = ();\n")),Object(c.b)("p",null,"Since there is only one value of type ",Object(c.b)("inlineCode",{parentName:"p"},"unit"),", it carries no information. We\nwill use it when we need to specify a type but its value does not matter. For\nexample, look at the types of the print functions in ReasonML:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let a = print_int;\nlet b = print_string;\nlet c = print_float;\nlet d = print_newline;\n")),Object(c.b)("p",null,"All of them return a value of type ",Object(c.b)("inlineCode",{parentName:"p"},"unit")," because there is nothing to be\nreturned. In fact, this is a strong hint that these functions do their work via\nside-effects (albeit the relatively benign side-effect of sending some\ncharacters to the console). The ",Object(c.b)("inlineCode",{parentName:"p"},"print_newline")," function also takes ",Object(c.b)("inlineCode",{parentName:"p"},"unit")," as\nits argument type","\u2014","it needs no input, but there still needs to be some\nargument passed in so that it knows to do its job (emitting an end-of-line\ncharacter). Note the difference between the function value expression\n",Object(c.b)("inlineCode",{parentName:"p"},"print_newline"),", as seen above in the binding to ",Object(c.b)("inlineCode",{parentName:"p"},"d"),", and the function ",Object(c.b)("em",{parentName:"p"},"call"),"\nexpression ",Object(c.b)("inlineCode",{parentName:"p"},"print_newline()"),", which actually produces output:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'print_string("line 1, ");\nprint_newline;\nprint_string("still line 1");\nprint_newline();\nprint_string("line 2");\n')),Object(c.b)("h3",{id:"tuples-and-parameters"},"Tuples and Parameters"),Object(c.b)("p",null,"It might seem that tuples should be used to pass multiple parameters to\nfunctions, but as we have seen, ReasonML handles this by currying the function\ninto a series of functions each taking a single parameter. We can force it\nto pass tuples of arguments, and bind them to tuples of parameters, by\nincluding an extra pair of parentheses:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'let f: ((string, int)) => string = ((name, points)) => {\n  name ++ ": " ++ string_of_int(points) ++ "/100"\n};\nprint_string( f(("Brian", 93)) );\n')),Object(c.b)("p",null,"Now, that's ugly, and unless you really need to do that, don't do it. However,\nthis brings up an interesting equivalence of types. Note that the type for ",Object(c.b)("inlineCode",{parentName:"p"},"f"),"\nhere is ",Object(c.b)("inlineCode",{parentName:"p"},"((string, int)) => string"),"; in terms of sets, this is the set of\nfunctions ",Object(c.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(c.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(c.b)("semantics",{parentName:"math"},Object(c.b)("mrow",{parentName:"semantics"},Object(c.b)("msup",{parentName:"mrow"},Object(c.b)("mtext",{parentName:"msup"},"string"),Object(c.b)("mrow",{parentName:"msup"},Object(c.b)("mtext",{parentName:"mrow"},"string"),Object(c.b)("mo",{parentName:"mrow"},"\xd7"),Object(c.b)("mtext",{parentName:"mrow"},"int")))),Object(c.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"\\text{string}^{\\text{string}\\times\\text{int}}")))),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1.082702em",verticalAlign:"-0.19444em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord text"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"string")),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.888262em"}}),Object(c.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-3.12076em",marginRight:"0.05em"}}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord text mtight"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"string")),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mbin mtight"}),"\xd7"),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord text mtight"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"int")))))))))))))),". Compare this with the\nequivalent but curried function ",Object(c.b)("inlineCode",{parentName:"p"},"g"),":"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'let g: string => int => string = (name, points) => {\n  name ++ ": " ++ string_of_int(points) ++ "/100"\n};\nprint_string( g("Brian", 93) );\n')),Object(c.b)("p",null,"The type of ",Object(c.b)("inlineCode",{parentName:"p"},"g")," here is ",Object(c.b)("inlineCode",{parentName:"p"},"string => int => string"),"; in terms of sets, this is the\nset ",Object(c.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(c.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(c.b)("semantics",{parentName:"math"},Object(c.b)("mrow",{parentName:"semantics"},Object(c.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),"("),Object(c.b)("msup",{parentName:"mrow"},Object(c.b)("mtext",{parentName:"msup"},"string"),Object(c.b)("mtext",{parentName:"msup"},"int")),Object(c.b)("msup",{parentName:"mrow"},Object(c.b)("mo",Object(n.a)({parentName:"msup"},{stretchy:"false"}),")"),Object(c.b)("mtext",{parentName:"msup"},"string"))),Object(c.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"(\\text{string}^{\\text{int}})^{\\text{string}}")))),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1.138262em",verticalAlign:"-0.25em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mopen"}),"("),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord text"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"string")),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.888262em"}}),Object(c.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-3.12076em",marginRight:"0.05em"}}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord text mtight"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"int")))))))))),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mclose"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mclose"}),")"),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.830502em"}}),Object(c.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-3.063em",marginRight:"0.05em"}}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord text mtight"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"string")))))))))))))),". If these types are truly equivalent,\nin the sense that every function in one corresponds to a unique function in the other,\nthen that suggests that there might be a general equivalence of the form"),Object(c.b)("div",{className:"math math-display"},Object(c.b)("span",Object(n.a)({parentName:"div"},{className:"katex-display"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(c.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(c.b)("semantics",{parentName:"math"},Object(c.b)("mrow",{parentName:"semantics"},Object(c.b)("msup",{parentName:"mrow"},Object(c.b)("mi",{parentName:"msup"},"A"),Object(c.b)("mrow",{parentName:"msup"},Object(c.b)("mi",{parentName:"mrow"},"B"),Object(c.b)("mo",{parentName:"mrow"},"\xd7"),Object(c.b)("mi",{parentName:"mrow"},"C"))),Object(c.b)("mo",{parentName:"mrow"},"\u2261"),Object(c.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),"("),Object(c.b)("msup",{parentName:"mrow"},Object(c.b)("mi",{parentName:"msup"},"A"),Object(c.b)("mi",{parentName:"msup"},"C")),Object(c.b)("msup",{parentName:"mrow"},Object(c.b)("mo",Object(n.a)({parentName:"msup"},{stretchy:"false"}),")"),Object(c.b)("mi",{parentName:"msup"},"B"))),Object(c.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"A^{B\\times C}\\equiv(A^C)^B")))),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.891331em",verticalAlign:"0em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"A"),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.891331em"}}),Object(c.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-3.113em",marginRight:"0.05em"}}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault mtight",style:{marginRight:"0.05017em"}}),"B"),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mbin mtight"}),"\xd7"),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault mtight",style:{marginRight:"0.07153em"}}),"C"))))))))),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u2261"),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1.1413309999999999em",verticalAlign:"-0.25em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mopen"}),"("),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"A"),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.8913309999999999em"}}),Object(c.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-3.113em",marginRight:"0.05em"}}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault mtight",style:{marginRight:"0.07153em"}}),"C")))))))),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mclose"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mclose"}),")"),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.8913309999999999em"}}),Object(c.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-3.113em",marginRight:"0.05em"}}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault mtight",style:{marginRight:"0.05017em"}}),"B"))))))))))))),Object(c.b)("p",null,"This is indeed true (and it should remind you of a corresponding fact about exponents from\nordinary algebra), and we can write the functions in ReasonML that mediate this\nequivalence:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let curry = (f: (('b, 'c)) => 'a) => {\n  (b: 'b) => (c: 'c) => f((b, c))\n};\nlet uncurry = (g: 'b => 'c => 'a) => {\n  ((b, c): ('b, 'c)) => g(b)(c)\n};\n")),Object(c.b)("p",null,"That is, given any function from the pair type ",Object(c.b)("inlineCode",{parentName:"p"},"('b, 'c)")," to ",Object(c.b)("inlineCode",{parentName:"p"},"'a")," (type variables in\nReasonML always start with an apostrophe (",Object(c.b)("inlineCode",{parentName:"p"},"'"),")), we can apply the ",Object(c.b)("inlineCode",{parentName:"p"},"curry")," function to\nit to get the corresponding curried function of type ",Object(c.b)("inlineCode",{parentName:"p"},"'b => 'c => 'a"),". The ",Object(c.b)("inlineCode",{parentName:"p"},"uncurry"),"\nfunction is the inverse of this. Since we have functions going each direction that\nare inverses to each other, this shows that the two types (or sets) are equivalent."),Object(c.b)("h2",{id:"records-and-variants"},"Records and Variants"),Object(c.b)("h3",{id:"pattern-matching"},"Pattern Matching"),Object(c.b)("h3",{id:"recursive-types"},"Recursive Types"),Object(c.b)("h2",{id:"connection-to-natural-deduction"},"Connection to Natural Deduction"),Object(c.b)("h2",{id:"exercises"},"Exercises"),Object(c.b)("p",null,"TODO: another page on common patterns of recursion: map, reduce, fold, accumulator,\nauxilliary function, tail-recursion. A page on functional graphics. A summary page\non ReasonML."),Object(c.b)("div",{className:"footnotes"},Object(c.b)("hr",{parentName:"div"}),Object(c.b)("ol",{parentName:"div"},Object(c.b)("li",Object(n.a)({parentName:"ol"},{id:"fn-1"}),"ReasonML, unlike many common languages,\ndistinguishes between the integer addition operator, written ",Object(c.b)("inlineCode",{parentName:"li"},"+"),", and the\nfloating-point addition operator, which is written ",Object(c.b)("inlineCode",{parentName:"li"},"+."),". In part this is done to\nmake type inference easier.",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#fnref-1",className:"footnote-backref"}),"\u21a9")),Object(c.b)("li",Object(n.a)({parentName:"ol"},{id:"fn-2"}),'As\nis often the case when things are named, Curry did not originate this idea. He got it\nfrom Moses Sch\xf6nfinkel, who may have picked it up from Gottlob Frege, but "currying"\nis easier to say than "sch\xf6nfinkeling" or "fregeing"',"\u2026",".",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#fnref-2",className:"footnote-backref"}),"\u21a9")),Object(c.b)("li",Object(n.a)({parentName:"ol"},{id:"fn-3"}),"Part of the reason for this is simply tradition, but another\nimportant factor is that ReasonML does not have an easy way to give a type for a\nfunction that would take an ",Object(c.b)("span",Object(n.a)({parentName:"li"},{className:"math math-inline"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(c.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(c.b)("semantics",{parentName:"math"},Object(c.b)("mrow",{parentName:"semantics"},Object(c.b)("mi",{parentName:"mrow"},"n")),Object(c.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"n")))),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"n"))))),"-tuple plus an integer, say from 1 to ",Object(c.b)("span",Object(n.a)({parentName:"li"},{className:"math math-inline"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(c.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(c.b)("semantics",{parentName:"math"},Object(c.b)("mrow",{parentName:"semantics"},Object(c.b)("mi",{parentName:"mrow"},"n")),Object(c.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"n")))),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(c.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"n"))))),", and\nreturn that component of the tuple; since each component may have a different\ntype, what would the return type of that accessor be?",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#fnref-3",className:"footnote-backref"}),"\u21a9")))))}o.isMDXComponent=!0},158:function(e,a,t){"use strict";var n=t(0),s=t(32);a.a=function(){return Object(n.useContext)(s.a)}},159:function(e,a,t){"use strict";t.d(a,"a",(function(){return o})),t.d(a,"b",(function(){return h}));var n=t(0),s=t.n(n);function c(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){c(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,n,s=function(e,a){if(null==e)return{};var t,n,s={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],a.indexOf(t)>=0||(s[t]=e[t]);return s}(e,a);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)t=c[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var b=s.a.createContext({}),m=function(e){var a=s.a.useContext(b),t=a;return e&&(t="function"==typeof e?e(a):i({},a,{},e)),t},o=function(e){var a=m(e.components);return s.a.createElement(b.Provider,{value:a},e.children)},l="mdxType",O={inlineCode:"code",wrapper:function(e){var a=e.children;return s.a.createElement(s.a.Fragment,{},a)}},j=Object(n.forwardRef)((function(e,a){var t=e.components,n=e.mdxType,c=e.originalType,r=e.parentName,b=p(e,["components","mdxType","originalType","parentName"]),o=m(t),l=n,j=o["".concat(r,".").concat(l)]||o[l]||O[l]||c;return t?s.a.createElement(j,i({ref:a},b,{components:t})):s.a.createElement(j,i({ref:a},b))}));function h(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var c=t.length,r=new Array(c);r[0]=j;var i={};for(var p in a)hasOwnProperty.call(a,p)&&(i[p]=a[p]);i.originalType=e,i[l]="string"==typeof e?e:n,r[1]=i;for(var b=2;b<c;b++)r[b]=t[b];return s.a.createElement.apply(null,r)}return s.a.createElement.apply(null,t)}j.displayName="MDXCreateElement"},160:function(e,a,t){"use strict";t.d(a,"a",(function(){return s}));var n=t(158);function s(e){const{siteConfig:a}=Object(n.a)(),{baseUrl:t="/"}=a||{};if(!e)return e;return/^(https?:|\/\/)/.test(e)?e:e.startsWith("/")?t+e.slice(1):t+e}}}]);