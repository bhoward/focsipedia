"use strict";(self.webpackChunkfocsipedia=self.webpackChunkfocsipedia||[]).push([[2804],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||s[m]||o;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[d]="string"==typeof e?e:a,i[1]=c;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9376:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>s,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={slug:"mapreduce",title:"MapReduce",author:"Brian Howard"},i=void 0,c={permalink:"/focsipedia/blog/mapreduce",source:"@site/blog/2020-02-28-mapreduce.md",title:"MapReduce",description:"No reading for today. We will talk about the map and reduce functions on lists, and how they made Google what it is today.",date:"2020-02-28T00:00:00.000Z",formattedDate:"February 28, 2020",tags:[],readingTime:.72,hasTruncateMarker:!0,authors:[{name:"Brian Howard"}],frontMatter:{slug:"mapreduce",title:"MapReduce",author:"Brian Howard"},prevItem:{title:"Exam 1 Review",permalink:"/focsipedia/blog/exam1-review"},nextItem:{title:"Types and Functional Programming, Continued",permalink:"/focsipedia/blog/types2"}},l={authorsImageUrls:[void 0]},p=[],u={toc:p},d="wrapper";function s(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"No reading for today. We will talk about the ",(0,a.kt)("inlineCode",{parentName:"p"},"map")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"reduce")," functions on lists, and how they made Google what it is today."),(0,a.kt)("p",null,"For reference, here are the definitions of ",(0,a.kt)("inlineCode",{parentName:"p"},"map")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"reduce")," developed in class (this version of ",(0,a.kt)("inlineCode",{parentName:"p"},"reduce")," is often called ",(0,a.kt)("inlineCode",{parentName:"p"},"foldLeft"),"):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-reason",metastring:"edit",edit:!0},'let rec map = (f, aList) => {\n  switch (aList) {\n  | [] => []\n  | [head, ...tail] => [f(head), ...map(f, tail)]\n  }\n};\n\nlet rec reduce = (g, init, aList) => {\n  switch (aList) {\n  | [] => init\n  | [head, ...tail] => reduce(g, g(init, head), tail)\n  }\n};\n\nmap(n => {2 * n}, [1, 2, 3, 4]);\nreduce((+), 0, [1, 2, 3, 4]);\nreduce((*), 1, [1, 2, 3, 4]);\nreduce((summary, n) => {summary ++ "," ++ string_of_int(n)}, "", [1, 2, 3, 4]);\nreduce((+), 0, map(n => {2 * n}, [1, 2, 3, 4]));\n')))}s.isMDXComponent=!0}}]);