"use strict";(self.webpackChunkfocsipedia=self.webpackChunkfocsipedia||[]).push([[2804],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),s=l(n),f=a,m=s["".concat(u,".").concat(f)]||s[f]||d[f]||o;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=s;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},9376:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return l},assets:function(){return p},toc:function(){return d},default:function(){return f}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],c={slug:"mapreduce",title:"MapReduce",author:"Brian Howard"},u=void 0,l={permalink:"/focsipedia/blog/mapreduce",source:"@site/blog/2020-02-28-mapreduce.md",title:"MapReduce",description:"No reading for today. We will talk about the map and reduce functions on lists, and how they made Google what it is today.",date:"2020-02-28T00:00:00.000Z",formattedDate:"February 28, 2020",tags:[],readingTime:.72,truncated:!0,authors:[{name:"Brian Howard"}],prevItem:{title:"Exam 1 Review",permalink:"/focsipedia/blog/exam1-review"},nextItem:{title:"Types and Functional Programming, Continued",permalink:"/focsipedia/blog/types2"}},p={authorsImageUrls:[void 0]},d=[],s={toc:d};function f(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"No reading for today. We will talk about the ",(0,o.kt)("inlineCode",{parentName:"p"},"map")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"reduce")," functions on lists, and how they made Google what it is today."),(0,o.kt)("p",null,"For reference, here are the definitions of ",(0,o.kt)("inlineCode",{parentName:"p"},"map")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"reduce")," developed in class (this version of ",(0,o.kt)("inlineCode",{parentName:"p"},"reduce")," is often called ",(0,o.kt)("inlineCode",{parentName:"p"},"foldLeft"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-reason",metastring:"edit",edit:!0},'let rec map = (f, aList) => {\n  switch (aList) {\n  | [] => []\n  | [head, ...tail] => [f(head), ...map(f, tail)]\n  }\n};\n\nlet rec reduce = (g, init, aList) => {\n  switch (aList) {\n  | [] => init\n  | [head, ...tail] => reduce(g, g(init, head), tail)\n  }\n};\n\nmap(n => {2 * n}, [1, 2, 3, 4]);\nreduce((+), 0, [1, 2, 3, 4]);\nreduce((*), 1, [1, 2, 3, 4]);\nreduce((summary, n) => {summary ++ "," ++ string_of_int(n)}, "", [1, 2, 3, 4]);\nreduce((+), 0, map(n => {2 * n}, [1, 2, 3, 4]));\n')))}f.isMDXComponent=!0}}]);