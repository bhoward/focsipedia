(window.webpackJsonp=window.webpackJsonp||[]).push([[132],{235:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return d}));var l=t(1),a=t(6),r=(t(0),t(258)),o={id:"galleryS20A",title:"Spring 2020 DPoodle Gallery, Section A"},i={id:"fp/galleryS20A",isDocsHomePage:!1,title:"Spring 2020 DPoodle Gallery, Section A",description:"Allyson Low",source:"@site/docs/fp/galleryS20A.md",permalink:"/focsipedia/docs/fp/galleryS20A",editUrl:"https://github.com/bhoward/focsipedia/edit/master/docs/fp/galleryS20A.md"},c=[{value:"Allyson Low",id:"allyson-low",children:[]},{value:"Ashley Dapore",id:"ashley-dapore",children:[]},{value:"Caymn Lutz",id:"caymn-lutz",children:[]},{value:"Hamza Niazi",id:"hamza-niazi",children:[]},{value:"Helen Amaro",id:"helen-amaro",children:[]},{value:"Jacob Bauer",id:"jacob-bauer",children:[]},{value:"Jason Cast",id:"jason-cast",children:[]},{value:"Nemekhbayar Nergui",id:"nemekhbayar-nergui",children:[]},{value:"Rana Muhammad Hamza",id:"rana-muhammad-hamza",children:[]},{value:"Samuel Johnson",id:"samuel-johnson",children:[]},{value:"Sang Truong",id:"sang-truong",children:[]},{value:"Tyler Hicks",id:"tyler-hicks",children:[]}],s={rightToc:c};function d(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(l.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"allyson-low"},"Allyson Low"),Object(r.b)("pre",null,Object(r.b)("code",Object(l.a)({parentName:"pre"},{className:"language-reason",metastring:"demo",demo:!0}),'{\nlet case = solid(Color("saddleBrown"), rectangle(400., 300.));\nlet shelf = solid(Color("sandyBrown"), rectangle(400., 50.))\nlet bookOne = solid(Color("skyblue"), ellipse(6.,30.)) +++ (solid(Color("green"), rectangle(15., 100.)));\nlet bookTwo = solid(Color("tan"), rectangle(5., 40.)) +++ (solid(Color("lightCyan"), rectangle(20., 100.)));\nlet series = bookOne ||| bookTwo;\n\nlet rec fillShelf = count => {\n switch (count){\n | 0 => empty\n | n => series ||| fillShelf(n - 1)\n }\n};\n\nlet fullShelf = fillShelf(11);\ndraw(translate(0., 40., fullShelf) --- translate(0., 50., shelf) +++ case);\n}\n')),Object(r.b)("h2",{id:"ashley-dapore"},"Ashley Dapore"),Object(r.b)("pre",null,Object(r.b)("code",Object(l.a)({parentName:"pre"},{className:"language-reason",metastring:"demo",demo:!0}),'{\nlet cover = solid(Color("black"), square(600.))\nlet cov = solid(rgba(0,0,0,1.0), square(610.))\nlet shape = solid(rgba(132,160,160,1.0), triangle(160., 148.))\nlet shape1 = solid(Color("black"), triangle(148., 136.))\nlet wrec = solid(rgba(255,255,255,0.5), rectangle(4., 295.))\nlet rect = solid(Color("black"), rectangle(5., 283.))\nlet col = count => {\n  switch (count) {\n  | 0 => empty\n  | n => fill(hsla(float_of_int(315+count*55),1.,0.4, 1.0), strokeWidth(0.0, rectangle(5.6,295.)))\n  }\n};\nlet rec rainbow = count => {\n  switch (count) {\n  | 0 => empty\n  | n => col(n) ||| rainbow(n-1)\n  }\n};\nlet finalCover = translate(-164., -18., rotate(75., wrec))\n  +++cover\n  +++stroke(Color("black"), strokeWidth(1., cov));\nlet finalShape = translate(0., -38., shape1)\n  +++translate(0., -40., shape)\n  +++translate(157., -49., rotate(276., rect))\n  +++translate(165., -10., rotate(278., rect));\n  \nlet finalRainbow = translate(158., -30., rotate(277., rainbow(6)));\ndraw(\n  finalShape\n  +++finalRainbow\n  +++finalCover);\n}\n')),Object(r.b)("h2",{id:"caymn-lutz"},"Caymn Lutz"),Object(r.b)("pre",null,Object(r.b)("code",Object(l.a)({parentName:"pre"},{className:"language-reason",metastring:"demo",demo:!0}),'{\nlet a = fill(color("pink"), ellipse(45., 80.));\nlet b = rectangle(10., 10.);\nlet c = strokeWidth(3., rectangle(50., 50.));\nlet d = rectangle(50., 50.);\ndraw(rotate(1., scale(1., d))\n      +++ stroke(color("pink"), (a ||| b) --- c));\nlet f = withFont(2., Serif, Bold, Italic, setBounds(-30., 30., -20., 20., Text("Happy Easter")));\ndraw(f);\n}\n')),Object(r.b)("h2",{id:"hamza-niazi"},"Hamza Niazi"),Object(r.b)("pre",null,Object(r.b)("code",Object(l.a)({parentName:"pre"},{className:"language-reason",metastring:"demo",demo:!0}),'{\nlet line = lenght => {\n  strokeWidth(2., focus(ML, openPath([\n    moveXY(0., 0.),\n    lineXY(lenght, 0.),\n    moveXY(lenght, 0.)])))\n};\nlet leftEye = solid(color("red"), circle(25.));\nlet p1 = (-40., 0.);\nlet p2 = (40., 0.);\nlet c1 = (-10., 30.);\nlet c2 = (10., 30.);\nlet curve = openPath([moveP(p1), curveP(c1, c2, p2)]);\n\nlet rec sunGlasses = nums => {\n  switch (nums) {\n  | [] => solid(color("green"), circle(25.))\n  | [head, ...tail] => line(head) ||| sunGlasses(tail)\n  }\n};\ndraw(rotate(-90., translate(0., 0., leftEye) --- rotate(90., sunGlasses([25., 1.]))) --- rotate(-90., line(35.)) --- curve +++ fill(color("goldenrod"), circle(80.)))\n}\n')),Object(r.b)("h2",{id:"helen-amaro"},"Helen Amaro"),Object(r.b)("pre",null,Object(r.b)("code",Object(l.a)({parentName:"pre"},{className:"language-reason",metastring:"demo",demo:!0}),'{\nlet rec hat = nums => {\n  switch(nums){\n  | [] => Rectangle(50., 50.)\n  | [head] => Rectangle(5., head)\n  | [head, ...tail] => Beside(Rectangle(5., head), hat(tail))\n  }\n};\n\nlet rec snowMan = nums => {\n  switch(nums){\n  | [] => circle(10.)\n  | [head] => circle(head)\n  | [head, ...tail] => Above(circle(head), snowMan(tail))\n  }\n};\n\nlet snowman1 = fill(color("snow"), snowMan([13.,15.,24.]));\n\nlet button1 = fill(color("black"), circle(2.));\n\nlet topHat = rotate(90.,fill(color("black"), hat([20.,30.])));\n\nlet rightscarf = fill(color("red"), rectangle(20., 7.));\nlet scarf = beside(rightscarf, fill(color("red"), rectangle(30., 7.)));\nlet finalScarf = translate(15., -25., scarf);\n\nlet sky = fill(color("royalBlue"), Rectangle(120.,100.));\nlet ground = fill(color("snow"), Rectangle(120., 40.) );\n\nlet righteye = fill(color("black"),circle(2.));\nlet eyes = beside(righteye, fill(color("black"), circle(2.)))\nlet finalEyes = translate(0., -42., eyes);\n\nlet moon = translate(-40., -35., fill(color("cornSilk"), circle(10.))); \nlet finalSky = on(moon, sky);\n\nlet hat = translate(0., -55., topHat);\nlet hatSnowman = on(hat, snowman1);\n\nlet scarfSnowman = on(finalScarf, hatSnowman);\nlet eyeSnowman = on (finalEyes, scarfSnowman);\n\nlet nose = rotate(90., fill(color("orange"), triangle(3.,15.)));\nlet finalNose = translate(8., -38.,nose);\nlet noseSnowman = on(finalNose, eyeSnowman);\n\nlet arrow = len => {\n  strokeWidth(2., focus(ML, openPath([\n    moveXY(0., 0.),\n    lineXY(len, 0.),\n    lineXY(len -. 5., 5.),\n    moveXY(len, 0.),\n    lineXY(len -. 5., -5.)])))\n};\n\nlet righthand = rotate(-220., fill(color("saddleBrown"),arrow(25.)));\nlet finalhand = translate(30.,-30., righthand);\nlet righthandSnowman = on(finalhand, noseSnowman);\n\nlet lefthand = rotate(-320., fill(color("saddleBrown"), arrow(25.)));\nlet finalLhand = translate(-30., -30., lefthand);\nlet twoHandSnowman = on (finalLhand, righthandSnowman);\n\nlet b1Snowman = translate(0., -15., button1);\nlet fb1Snowman = on(b1Snowman, twoHandSnowman);\n\nlet b2Snowman = translate(0., -5., button1);\nlet fb2Snowman = on(b2Snowman, fb1Snowman);\n\nlet b3Snowman = translate(0., 15., button1);\nlet fb3Snowman = on(b3Snowman, fb2Snowman);\n\nlet b4Snowman = translate(0., 25., button1);\nlet fb4Snowman = on(b4Snowman, fb3Snowman);\n\nlet b5Snowman = translate(0., 35., button1);\nlet finalSnowman = on(b5Snowman, fb4Snowman);\n\nlet background = above(finalSky, ground);\ndraw(finalSnowman +++ background);\n}\n')),Object(r.b)("h2",{id:"jacob-bauer"},"Jacob Bauer"),Object(r.b)("pre",null,Object(r.b)("code",Object(l.a)({parentName:"pre"},{className:"language-reason",metastring:"demo",demo:!0}),"{\n/* This code contains multiple functions that create random shapes in a grid. There are two types of grids. A pattern that is one single randomized shape, and there is a normal grid that creates completely randomized shapes in a grid. The grid and pattern functions have 3 parameters, a function, a width, and a height. Exectute the code multiple times to see what it does */\nlet random_shape = () => {\n  let f1 = [circle, square];\n  let f2 = [ellipse, rectangle, triangle];\n  let select_list = Random.int(2);\n  let lr = Random.int(256);\n  let lg = Random.int(256);\n  let lb = Random.int(256);\n  let la = Random.float(1.);\n  let lclr = LineColor(RGBA(lr, lg, lb, la))\n  let fr = Random.int(256);\n  let fg = Random.int(256);\n  let fb = Random.int(256);\n  let fa = Random.float(1.);\n  let fclr = FillColor(RGBA(fr, fg, fb, fa))\n  let lw = Random.float(8.);\n  let lwidth = LineWidth(lw);\n  let rotval = Random.float(360.);\n  let arg1 = Random.float(10.) +. 2.;\n  switch(select_list){\n    |  0  =>  let select_elem = Random.int(2);\n            rotate(rotval, Styled(List.nth(f1, select_elem)(arg1), [lclr, fclr, lwidth]));\n    |  1  =>  let select_elem = Random.int(3);\n            let arg2 = Random.float(10.) +. 2.;\n            rotate(rotval, Styled(List.nth(f2, select_elem)(arg1, arg2), [lclr, fclr, lwidth]));\n    | n => empty\n  }\n}\n\nlet const_random_shape = {\n  random_shape()\n}\n\nlet rec row = (func, x) => {\n  switch(x){\n    | 0 => empty\n    | n => func() ||| row(func, n - 1)\n  }\n}\n\nlet rec column = (func, x, y) => {\n  switch(y){\n    | 0 => empty\n    | n => row(func, x) --- column(func, x, n - 1)\n  }\n}\n\nlet grid = (func, x, y) => {\n  column(func, x, y);\n}\n\nlet rec const_row = (func, x) => {\n  switch(x){\n    | 0 => empty\n    | n => func ||| const_row(func, n - 1)\n  }\n}\n\nlet rec const_column = (func, x, y) => {\n  switch(y){\n    | 0 => empty\n    | n => const_row(func, x) --- const_column(func, x, n - 1)\n  }\n}\n\nlet pattern = (func, x, y) => {\n  const_column(func, x, y);\n}\n\ndraw(pattern(const_random_shape, 10, 2) --- (pattern(const_random_shape, 2, 10) ||| grid(random_shape, 10, 10) ||| pattern(const_random_shape, 2, 10)) --- pattern(const_random_shape, 10, 2));\n}\n")),Object(r.b)("h2",{id:"jason-cast"},"Jason Cast"),Object(r.b)("pre",null,Object(r.b)("code",Object(l.a)({parentName:"pre"},{className:"language-reason",metastring:"demo",demo:!0}),'{\nlet back = solid(Color("black"), rectangle(500., 500.));\nlet text = Bounds(Text("F U N"), -4., 4., -10., 70.);\nlet picture = (start, radius, pictures) => {\n  let step = 5.;\n  let dot = regularPolygon(6, 9., 10.);\n  let rec loop = count => {\n    let angle = radians(step *. float_of_int(count));\n    let r = radius /. float_of_int(pictures) *. float_of_int(count); \n    switch (count) {\n    | 0 => empty\n    | n => fill(hsl(float_of_int(200 + count * 3), 0.5, 0.5),\n        translate(r *. cos(angle), r *. sin(angle), dot)) +++ loop(n - 1)\n    }\n  };\n  loop(pictures)\n};\ndraw(above(text,picture(10., 300., 100))+++ back);\n}\n')),Object(r.b)("h2",{id:"nemekhbayar-nergui"},"Nemekhbayar Nergui"),Object(r.b)("pre",null,Object(r.b)("code",Object(l.a)({parentName:"pre"},{className:"language-reason",metastring:"demo",demo:!0}),'{\nlet deepBlue = rgb(15,96,137);\nlet skyBlue = rgb(0,153,230);\nlet deepRed = rgb(214,26,26);\nlet red = rgb(255,0,0);\nlet white = rgb(255,255,255);\nlet green = rgb(0,128,0);\nlet black =rgb(0,0,0);\nlet mustard = rgb(255,219,88);\nlet purple = rgb(128,0,128);\n\nlet symbol = solid(purple, regularPolygon(6,15.,90.));\nlet rec banter = num => {\n    switch(num) {\n    | 0 => empty\n    | num => symbol ||| banter(num-1)\n    }\n};\n\nlet fLeft = solid(deepBlue, rectangle(50., 100.));\nlet fMiddle = solid(white, rectangle (50.,100.));\nlet fRight = solid(deepRed, rectangle (50.,100.));\nlet france = fLeft ||| fMiddle ||| fRight;\n\nlet fname = fill(black, withFont(0.5,Serif, Regular, Normal, text("France")));\nlet flagFrance = france ---fname;\n\nlet jBody = solid(white, rectangle(150., 100.));\nlet jCircle = solid(red, ellipse(50.,50.));\nlet japan = jCircle+++jBody;\n\nlet jname = fill(black, withFont(0.5,Serif, Regular, Normal, text("Japan")));\nlet flagJapan = japan---jname;\n\nlet gTop = solid(black, rectangle(150.,33.));\nlet gMiddle=solid(red,rectangle(150.,33.));\nlet gBottom = solid(mustard, rectangle(150.,33.));\nlet germany = gTop---gMiddle---gBottom;\n\nlet gname = fill(black, withFont(0.5,Serif, Regular, Normal, text("Germany")));\nlet flagGermany = germany---gname;\n\nlet iLeft = solid(green,rectangle(50.,100.));\nlet iMiddle = solid(white,rectangle(50.,100.));\nlet iRight = solid(red, rectangle(50.,100.));\nlet italy = iLeft ||| iMiddle ||| iRight;\n\nlet iname = fill(black, withFont(0.5,Serif, Regular, Normal, text("Italy")));\nlet flagItaly = italy---iname;\n\nlet rTop = solid(white, rectangle(150., 33.));\nlet rMiddle =solid(skyBlue,rectangle(150.,33.));\nlet rBottom = solid(red, rectangle(150.,33.));\nlet russia = rTop---rMiddle---rBottom;\nlet rname = fill(black, withFont(0.5,Serif, Regular, Normal, text("Russia")));\nlet flagRussia = russia---rname;\n\nlet heading = banter(6);\ndraw(heading);\ndraw(flagFrance);\ndraw(flagJapan);\ndraw(flagGermany);\ndraw(flagItaly);\ndraw(flagRussia);\n}\n')),Object(r.b)("h2",{id:"rana-muhammad-hamza"},"Rana Muhammad Hamza"),Object(r.b)("pre",null,Object(r.b)("code",Object(l.a)({parentName:"pre"},{className:"language-reason",metastring:"demo",demo:!0}),'{\nlet top = solid(Color("orange"), rectangle(420., 200.));\nlet bottom = solid(Color("yellow"), rectangle(420., 100.));\nlet words  = fill(Color("Blue"), withFont(3.0, Sans, Regular, Normal, text("CSC233")));\nlet words2 = fill(Color("Purple"), withFont(1.0, Sans, Regular, Normal, text("By: Rana MHamza")));\n\n/*shapes in the top*/\nlet circ1 = solid(Color("indigo"), circle(30.));\nlet circ2 = solid(Color("yellow"), circle(20.));\nlet tri1  = solid(Color("orange"), triangle(30., 30.));\nlet topshape = tri1 +++ circ2 +++ circ1;\n\nlet rec topshapeRec = count => {\n  switch (count) {\n  | 0 => empty\n  | n => topshape ||| topshapeRec(n - 1)\n  }\n};\n\n/*shapes in the bottom*/\nlet circ3 = solid(Color("orange"), circle(30.));\nlet circ4 = solid(Color("yellow"), circle(20.));\nlet tri2  = solid(Color("indigo"), triangle(30., 30.));\nlet bottomshape = tri2 +++ circ4 +++ circ3;\n\nlet rec btmshapeRec = count => {\n  switch (count) {\n  | 0 => empty\n  | n => bottomshape ||| btmshapeRec(n - 1)\n  }\n};\n\nlet bot = btmshapeRec(7);\nlet tops = topshapeRec(7);\ndraw(translate(0., 120., bot) +++ translate(0., -70., tops) +++ translate(-65.,0., words) ---translate(95.,0., words2) +++ translate(0., 100., bottom) +++ top);\n}\n')),Object(r.b)("h2",{id:"samuel-johnson"},"Samuel Johnson"),Object(r.b)("pre",null,Object(r.b)("code",Object(l.a)({parentName:"pre"},{className:"language-reason",metastring:"demo",demo:!0}),'{\n/*Creating the background components*/\nlet mySky = strokeWidth(0.3, fill(color("skyBlue"), rectangle(200., 100.)));\nlet myText = withFont(1., Serif, Bold, Italic, setBounds(-30., 30., -20., 20., Text("The Recursive Forest")));\nlet mySun = translate(-85., -35., strokeWidth(0.3, fill(color("gold"), circle(10.))));\nlet myGround = strokeWidth(0.3, fill(color("green"), rectangle(200., 20.)));\n\n/*Placing all background elements into one Image*/\nlet myBackground = myText --- (mySun +++ mySky) --- myGround;\n\n/*Creating the tree components*/\nlet treeTrunk = strokeWidth(0.3, fill(color("black"), circle(2.))) +++ strokeWidth(0.3, fill(color("brown"), rectangle(10., 40.)));\nlet treeLeaves = strokeWidth(0.3,fill(color("green"), circle(20.)));\n\n/*Placing all tree elements into one tree image*/\nlet myTree = translate(0., 30. , treeLeaves --- treeTrunk); \n\n/*Recursive function creates n trees side by side*/\nlet rec plantForest = n => {\n    switch (n) {\n  | 0 => empty\n  | n => myTree ||| plantForest(n - 1)\n  }\n};\n\n/*plantForest function called to create n trees and draw them on top of myBackground image*/\ndraw(plantForest(5) +++ myBackground);\n}\n')),Object(r.b)("h2",{id:"sang-truong"},"Sang Truong"),Object(r.b)("pre",null,Object(r.b)("code",Object(l.a)({parentName:"pre"},{className:"language-reason",metastring:"demo",demo:!0}),'{\n/* Sierpinski triangle */\nlet rec sierpinski = (num, b) => {\n  let h = 0.8660 *. b\n  switch(num) {\n  | 0 => empty\n  | k => {\n    let bigTrig = fill(color("white"), stroke(rgb(1, 1, 255), strokeWidth(0.2, triangle(b, h))))\n    let leftC = bottomLeft(bigTrig)\n    let rightC = bottomRight(bigTrig)\n    let topC = (0., top(bigTrig)) \n    translateP(leftC, focus(BL, sierpinski(num - 1, b/. 2.)))\n    +++\n    translateP(rightC, focus(BR, sierpinski(num - 1, b/. 2.)))\n    +++\n    translateP(topC, focus(TC, sierpinski(num - 1, b/. 2.)))\n    +++\n    bigTrig\n  }\n  }\n}\ndraw(sierpinski(10, 150.))\n    \n/* Pyramid top down */\n\nlet rec bigTriangle = (num, b) => {\n  let h = 0.8660 *. b\n    switch(num) {\n  | 0 => empty\n  | num => {\n    bigTriangle (num-1, b/.1.1)\n    +++\n    fill(color("white"), stroke(rgb(1, 1, 255), strokeWidth(0.2, triangle(b, h))))\n    }\n    }   \n}\ndraw(bigTriangle(30, 100.))\n}\n')),Object(r.b)("h2",{id:"tyler-hicks"},"Tyler Hicks"),Object(r.b)("pre",null,Object(r.b)("code",Object(l.a)({parentName:"pre"},{className:"language-reason",metastring:"demo",demo:!0}),'{\n/*Prescription Bottle */\nlet top = (solid(Color("white"), rectangle(60., 10.)) ---\n    solid(Color("white"), rectangle(90., 10.)));\n            \nlet bottle = (solid(Color("white"), rectangle(81., 43.)) +++\n    solid(Color("orange"), rectangle(80., 100.)));\n    \nlet myText = fill(color("black"), withFont(0.40, Serif, Regular, Normal, text("Rx____________")));\n\n/* Background */\nlet bckgrd= solid(Color("navajoWhite"), rectangle(400., 300.));\n\nlet prescriptBottle = top --- bottle; \nlet finalPBottle = myText +++ translate(5., 0., prescriptBottle +++ bckgrd);\n\n/* Creating the Pills */\n\nlet redHalf = solid(Color("red"), ellipse(8., 6.));\nlet yellowHalf = solid(Color("yellow"), ellipse(8., 6.));\nlet finalPill = redHalf +++ translate(7.,0., yellowHalf);\n\n/* Recursion for "Pills in Bottle" */\n/* Row of Pills */\nlet rec pillS = ct => {\n  switch (ct) {\n    | 1 => empty\n    | n => finalPill ||| pillS(n - 1)\n  }\n}; \n\n/* Column of Pills */\nlet rec amountPills = amount => {\n  switch (amount) {\n    | 0 => empty\n    |amount => pillS(6) --- amountPills(amount -1)\n  }\n};\n\nlet bottlePills = pillS(1); \nlet colPills = amountPills(4);\n\ndraw(translate(0., 80., bottlePills) +++ translate(6., 52., colPills) +++ translate(0., 5., finalPBottle));\n}\n')))}d.isMDXComponent=!0},258:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return b}));var l=t(0),a=t.n(l);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,l,a=function(e,n){if(null==e)return{};var t,l,a={},r=Object.keys(e);for(l=0;l<r.length;l++)t=r[l],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)t=r[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),d=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i({},n,{},e)),t},m=function(e){var n=d(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},g=Object(l.forwardRef)((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=d(t),g=l,b=m["".concat(o,".").concat(g)]||m[g]||u[g]||r;return t?a.a.createElement(b,i({ref:n},s,{components:t})):a.a.createElement(b,i({ref:n},s))}));function b(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,o=new Array(r);o[0]=g;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var s=2;s<r;s++)o[s]=t[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}g.displayName="MDXCreateElement"}}]);