(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{145:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return c})),t.d(a,"metadata",(function(){return b})),t.d(a,"rightToc",(function(){return p})),t.d(a,"default",(function(){return l}));var n=t(1),s=t(6),m=(t(0),t(182)),c=(t(184),{id:"types",title:"Types in Functional Programming"}),b={id:"fp/types",title:"Types in Functional Programming",description:"import useBaseUrl from '@docusaurus/useBaseUrl';",source:"@site/docs/fp/types.md",permalink:"/focsipedia/docs/fp/types",editUrl:"https://github.com/bhoward/focsipedia/edit/master/docs/fp/types.md",sidebar:"someSidebar",previous:{title:"Introduction to Functional Programming",permalink:"/focsipedia/docs/fp/intro"},next:{title:"DPoodle Graphics",permalink:"/focsipedia/docs/fp/doodle"}},p=[{value:"Functions",id:"functions",children:[]},{value:"Type Inference",id:"type-inference",children:[{value:"Currying",id:"currying",children:[]}]},{value:"Tuples",id:"tuples",children:[{value:"Tuples and Parameters",id:"tuples-and-parameters",children:[]}]},{value:"Type Aliases and Parameterized Types",id:"type-aliases-and-parameterized-types",children:[]},{value:"Constructors and Variants",id:"constructors-and-variants",children:[{value:"Enumerations",id:"enumerations",children:[]},{value:"Algebraic Data Types",id:"algebraic-data-types",children:[]},{value:"Pattern Matching",id:"pattern-matching",children:[]},{value:"Recursive Types",id:"recursive-types",children:[]}]},{value:"Connection to Natural Deduction",id:"connection-to-natural-deduction",children:[]},{value:"Exercises",id:"exercises",children:[]},{value:"TODO",id:"todo",children:[]}],r={rightToc:p},i="wrapper";function l(e){var a=e.components,t=Object(s.a)(e,["components"]);return Object(m.b)(i,Object(n.a)({},r,t,{components:a,mdxType:"MDXLayout"}),Object(m.b)("p",null,"One of the hallmarks of modern functional programming is a strong and rich\nsystems of types. The type of an expression can be thought of as the set of all\nvalues that the expression might have; by specifying the type of a parameter to\na function, it constrains the values that may be provided as input. In this\nsense, the type of a function is then a form of contract: if the input satisfies\nsome condition (is a value in the parameter type), then the output is also\nguaranteed to satisfy a condition (be a value of the result type)."),Object(m.b)("h2",{id:"functions"},"Functions"),Object(m.b)("p",null,"In ReasonML we write the type of functions from ",Object(m.b)("inlineCode",{parentName:"p"},"A")," to ",Object(m.b)("inlineCode",{parentName:"p"},"B")," as ",Object(m.b)("inlineCode",{parentName:"p"},"A => B"),". Given a\nfunction ",Object(m.b)("inlineCode",{parentName:"p"},"f")," of that type, if ",Object(m.b)("inlineCode",{parentName:"p"},"x")," is a value (or more generally any expression)\nof type ",Object(m.b)("inlineCode",{parentName:"p"},"A"),", then the ",Object(m.b)("strong",{parentName:"p"},"application")," ",Object(m.b)("inlineCode",{parentName:"p"},"f(x)")," will give us a result of type ",Object(m.b)("inlineCode",{parentName:"p"},"B"),".\nThe value ",Object(m.b)("inlineCode",{parentName:"p"},"x")," to which we apply the function is known as the ",Object(m.b)("strong",{parentName:"p"},"argument"),".\nFor example, ",Object(m.b)("inlineCode",{parentName:"p"},"string_of_int")," is a function of type ",Object(m.b)("inlineCode",{parentName:"p"},"int => string"),"; when we\napply it to an integer, it returns the string of digits representing the argument:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"string_of_int(42);\n")),Object(m.b)("p",null,"Since functions are first-class values, we may bind a function to another name:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let f = string_of_int;\nf(42);\n")),Object(m.b)("p",null,"To create a function value, we use the double arrow to show that we are taking\na parameter, for example ",Object(m.b)("inlineCode",{parentName:"p"},"p"),", and using it to compute a result:\n",Object(m.b)("inlineCode",{parentName:"p"},"p => { ...result expression... }"),". The parameter may be any variable name","\u2014",'it\nwill represent the value of the argument just within the block containing the\nresult expressions. That is, if the variable name had been used outside the function,\nit will be temporarily "shadowed" by the new binding; when the function has returned\nits result, the local binding to the argument goes away.'),Object(m.b)("p",null,"Consider the following example:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let x = 5;\nlet f = x => { x + 12 };\nf(x * x) + x;\n")),Object(m.b)("p",null,"The first binding to ",Object(m.b)("inlineCode",{parentName:"p"},"x")," is the integer 5. When ",Object(m.b)("inlineCode",{parentName:"p"},"f")," is applied to its argument,\nwhich is ",Object(m.b)("inlineCode",{parentName:"p"},"x * x"),", or 25, we will temporarily bind 25 to a new, local variable\nnamed ",Object(m.b)("inlineCode",{parentName:"p"},"x")," and evaluate the body of the function: ",Object(m.b)("inlineCode",{parentName:"p"},"x + 12"),", which gives 37.\nContinuing to evaluate the expression ",Object(m.b)("inlineCode",{parentName:"p"},"f(x * x) + x"),", we now have ",Object(m.b)("inlineCode",{parentName:"p"},"37 + x"),";\nsince ",Object(m.b)("inlineCode",{parentName:"p"},"x")," here refers to the original binding, this is ",Object(m.b)("inlineCode",{parentName:"p"},"37 + 5"),", so it produces\nthe final answer 42."),Object(m.b)("h2",{id:"type-inference"},"Type Inference"),Object(m.b)("p",null,"ReasonML does not require that we specify the types of variables most of the\ntime, because it can usually infer what types they should have from the context\nand how they are used. Looking at the example above, since 5 is an int, we know\nthat ",Object(m.b)("inlineCode",{parentName:"p"},"x")," must have type ",Object(m.b)("inlineCode",{parentName:"p"},"int"),". In the second line, the local ",Object(m.b)("inlineCode",{parentName:"p"},"x")," must also be an\n",Object(m.b)("inlineCode",{parentName:"p"},"int"),", since we can add 12 to it.",Object(m.b)("sup",Object(n.a)({parentName:"p"},{id:"fnref-1"}),Object(m.b)("a",Object(n.a)({parentName:"sup"},{href:"#fn-1",className:"footnote-ref"}),"1"))," The result of the function body will be an ",Object(m.b)("inlineCode",{parentName:"p"},"int"),", so\nthe type of ",Object(m.b)("inlineCode",{parentName:"p"},"f")," is ",Object(m.b)("inlineCode",{parentName:"p"},"int => int"),". Finally, the application of ",Object(m.b)("inlineCode",{parentName:"p"},"f")," in the third line\nchecks out, because it is applied to an integer argument (",Object(m.b)("inlineCode",{parentName:"p"},"x * x"),"), and its result\nis used in a further integer addition. We could be explicit about the types and\nadd a ",Object(m.b)("strong",{parentName:"p"},"type annotation")," to each of the bindings:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let x: int = 5;\nlet f: int => int = (x: int) => { x + 12 };\nlet y: int = f(x * x) + x;\nlet z: string = string_of_int(y);\n")),Object(m.b)("p",null,"However, the convention in ReasonML is that type annotations are not generally\nused except as documentation and as a check that the compiler is doing what we\nthink it is."),Object(m.b)("h3",{id:"currying"},"Currying"),Object(m.b)("p",null,"When we write a function that takes multiple arguments, we may list the parameters\nin parentheses, separated by commas:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let average = (a, b) => { float_of_int(a + b) /. 2.0 };\naverage(7, 10);\n")),Object(m.b)("p",null,"This is actually a lie! In ReasonML, functions can only have a single argument.\nBehind the scenes, the code above is translated to the following:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let average = a => { b => { float_of_int(a + b) /. 2.0 } };\naverage(7)(10);\n")),Object(m.b)("p",null,"That is, ",Object(m.b)("inlineCode",{parentName:"p"},"average")," is a function that takes an integer parameter ",Object(m.b)("inlineCode",{parentName:"p"},"a")," and returns\nanother function. This second function expects to be given another integer\nparameter, named ",Object(m.b)("inlineCode",{parentName:"p"},"b"),", and then it will compute the result (which is a ",Object(m.b)("inlineCode",{parentName:"p"},"float"),"\nfor variety). The computation on the second line corresponds to this: first\n",Object(m.b)("inlineCode",{parentName:"p"},"average")," is applied to the argument 7. The resulting function is then further\napplied to the argument 10, producing the desired floating-point result."),Object(m.b)("p",null,"Here is the same code, written out more explicitly:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let average: int => (int => float) = (a: int) => {\n  (b: int) => {\n    float_of_int(a + b) /. 2.0\n  }\n};\nlet result1: int => float = average(7);\nlet result: float = result1(10);\n")),Object(m.b)("p",null,"This replacement of multiple-parameter functions with a sequence of single-parameter\nfunctions is called ",Object(m.b)("strong",{parentName:"p"},"currying"),", named after the logician Haskell B. Curry.",Object(m.b)("sup",Object(n.a)({parentName:"p"},{id:"fnref-2"}),Object(m.b)("a",Object(n.a)({parentName:"sup"},{href:"#fn-2",className:"footnote-ref"}),"2"))," One advantage of this,\nother than the simplicity of only needing one kind of function, is that it is often\nuseful to create a ",Object(m.b)("strong",{parentName:"p"},"partially applied")," function, where some of its arguments have\nbeen supplied to create a new function ready to be given the rest. For example, suppose\nwe have a function for formatting exam grades:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'let format_grade = (exam, total, name, points) => {\n  name ++ ", " ++ exam ++ ": " ++ string_of_int(points) ++ "/" ++ string_of_int(total) \n};\nformat_grade("Midterm", 100, "Brian", 93);\n')),Object(m.b)("p",null,"We could take advantage of currying to create a specialized function for formatting the\nmidterm grades:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'let format_midterm = format_grade("Midterm", 100);\nformat_midterm("Brian", 93);\nformat_midterm("Alice", 97);\n')),Object(m.b)("p",null,"The first two arguments of ",Object(m.b)("inlineCode",{parentName:"p"},"format_grade"),' have been provided with the exam name\n("Midterm") and the total number of points (100). Now we have a new function,\nbound to ',Object(m.b)("inlineCode",{parentName:"p"},"format_midterm"),", that just needs to be applied to a student name and\ngrade, and then it can produce a string with all four components."),Object(m.b)("h2",{id:"tuples"},"Tuples"),Object(m.b)("p",null,"Perhaps the most basic form of data structure is the ",Object(m.b)("strong",{parentName:"p"},"tuple"),". We have already\nseen this in the context of\n",Object(m.b)("a",Object(n.a)({parentName:"p"},{href:"../sets/functions#pairs"}),"sets and cartesian products"),": an ",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"n")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"n")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"n"))))),"-tuple is simply\nan ordered listing of ",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"n")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"n")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"n")))))," values, traditionally shown in parentheses separated\nby commas. The ReasonML syntax for a tuple type is likewise an ordered listing\nof each value's type, in parentheses and separated by commas. For example, the\ntuple ",Object(m.b)("inlineCode",{parentName:"p"},'(42, "hello", 3.1416)')," has type ",Object(m.b)("inlineCode",{parentName:"p"},"(int, string, float)"),":"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'let demo: (int, string, float) = (42, "hello", 3.1416);\n')),Object(m.b)("p",null,"In the case ",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"n"),Object(m.b)("mo",{parentName:"mrow"},"="),Object(m.b)("mn",{parentName:"mrow"},"2")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"n=2")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"n"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"="),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"2"))))),", a tuple is just the familiar ",Object(m.b)("strong",{parentName:"p"},"pair"),". For example, the type\nof two-dimensional points with integer coordinates is ",Object(m.b)("inlineCode",{parentName:"p"},"(int, int)"),". Pairs come\nwith accessor functions named ",Object(m.b)("inlineCode",{parentName:"p"},"fst")," and ",Object(m.b)("inlineCode",{parentName:"p"},"snd")," to access the first and second\ncoordinates, respectively:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let p = (5, 10);\nlet x = fst(p);\nlet y = snd(p);\n")),Object(m.b)("p",null,"The standard library does not provide accessor functions for arbitrary\n",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"n")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"n")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"n"))))),"-tuples.",Object(m.b)("sup",Object(n.a)({parentName:"p"},{id:"fnref-3"}),Object(m.b)("a",Object(n.a)({parentName:"sup"},{href:"#fn-3",className:"footnote-ref"}),"3"))," Instead, we may retrieve\nthe components of a tuple through an extension of the binding operation, ",Object(m.b)("inlineCode",{parentName:"p"},"let"),":"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'let demo = (42, "hello", 3.1416); /* construct a tuple */\nlet (a, b, c) = demo;             /* "destruct" a tuple */\n')),Object(m.b)("p",null,"If we only want to extract some of the components, the other positions may be\nfilled with a place-holder, the so-called ",Object(m.b)("strong",{parentName:"p"},"wildcard")," identifier, ",Object(m.b)("inlineCode",{parentName:"p"},"_"),"\n(underscore):"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'let demo = (42, "hello", 3.1416);\nlet (_, greeting, _) = demo;\n')),Object(m.b)("p",null,"An ",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"n")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"n")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"n"))))),"-tuple when ",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"n"),Object(m.b)("mo",{parentName:"mrow"},"="),Object(m.b)("mn",{parentName:"mrow"},"1")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"n=1")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"n"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"="),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"1")))))," is just an ordinary value (which may be enclosed in\nparentheses as usual just for grouping purposes). However, the case when\n",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"n"),Object(m.b)("mo",{parentName:"mrow"},"="),Object(m.b)("mn",{parentName:"mrow"},"0")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"n=0")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"n"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"="),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"0")))))," is more interesting: the only value is the empty tuple, ",Object(m.b)("inlineCode",{parentName:"p"},"()"),", and its type\nis named ",Object(m.b)("inlineCode",{parentName:"p"},"unit"),":"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let a: unit = ();\n")),Object(m.b)("p",null,"Since there is only one value of type ",Object(m.b)("inlineCode",{parentName:"p"},"unit"),", it carries no information. We\nwill use it when we need to specify a type but its value does not matter. For\nexample, look at the types of the print functions in ReasonML:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let a = print_int;\nlet b = print_string;\nlet c = print_float;\nlet d = print_newline;\n")),Object(m.b)("p",null,"All of them return a value of type ",Object(m.b)("inlineCode",{parentName:"p"},"unit")," because there is nothing to be\nreturned. In fact, this is a strong hint that these functions do their work via\nside-effects (albeit the relatively benign side-effect of sending some\ncharacters to the console). The ",Object(m.b)("inlineCode",{parentName:"p"},"print_newline")," function also takes ",Object(m.b)("inlineCode",{parentName:"p"},"unit")," as\nits argument type","\u2014","it needs no input, but there still needs to be some\nargument passed in so that it knows to do its job (emitting an end-of-line\ncharacter). Note the difference between the function value expression\n",Object(m.b)("inlineCode",{parentName:"p"},"print_newline"),", as seen above in the binding to ",Object(m.b)("inlineCode",{parentName:"p"},"d"),", and the function ",Object(m.b)("em",{parentName:"p"},"call"),"\nexpression ",Object(m.b)("inlineCode",{parentName:"p"},"print_newline()"),", which actually produces output:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'print_string("line 1, ");\nprint_newline;\nprint_string("still line 1");\nprint_newline();\nprint_string("line 2");\n')),Object(m.b)("h3",{id:"tuples-and-parameters"},"Tuples and Parameters"),Object(m.b)("p",null,"It might seem that tuples should be used to pass multiple parameters to\nfunctions, but as we have seen, ReasonML handles this by currying the function\ninto a series of functions each taking a single parameter. We can force it\nto pass tuples of arguments, and bind them to tuples of parameters, by\nincluding an extra pair of parentheses:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'let f: ((string, int)) => string = ((name, points)) => {\n  name ++ ": " ++ string_of_int(points) ++ "/100"\n};\nprint_string( f(("Brian", 93)) );\n')),Object(m.b)("p",null,"Now, that's ugly, and unless you really need to do that, don't do it. However,\nthis brings up an interesting equivalence of types. Note that the type for ",Object(m.b)("inlineCode",{parentName:"p"},"f"),"\nhere is ",Object(m.b)("inlineCode",{parentName:"p"},"((string, int)) => string"),"; in terms of sets, this is the set of\nfunctions ",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("msup",{parentName:"mrow"},Object(m.b)("mtext",{parentName:"msup"},"string"),Object(m.b)("mrow",{parentName:"msup"},Object(m.b)("mtext",{parentName:"mrow"},"string"),Object(m.b)("mo",{parentName:"mrow"},"\xd7"),Object(m.b)("mtext",{parentName:"mrow"},"int")))),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"\\text{string}^{\\text{string}\\times\\text{int}}")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1.082702em",verticalAlign:"-0.19444em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord text"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"string")),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.888262em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-3.12076em",marginRight:"0.05em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord text mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"string")),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mbin mtight"}),"\xd7"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord text mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"int")))))))))))))),". Compare this with the\nequivalent but curried function ",Object(m.b)("inlineCode",{parentName:"p"},"g"),":"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'let g: string => int => string = (name, points) => {\n  name ++ ": " ++ string_of_int(points) ++ "/100"\n};\nprint_string( g("Brian", 93) );\n')),Object(m.b)("p",null,"The type of ",Object(m.b)("inlineCode",{parentName:"p"},"g")," here is ",Object(m.b)("inlineCode",{parentName:"p"},"string => int => string"),"; in terms of sets, this is the\nset ",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),"("),Object(m.b)("msup",{parentName:"mrow"},Object(m.b)("mtext",{parentName:"msup"},"string"),Object(m.b)("mtext",{parentName:"msup"},"int")),Object(m.b)("msup",{parentName:"mrow"},Object(m.b)("mo",Object(n.a)({parentName:"msup"},{stretchy:"false"}),")"),Object(m.b)("mtext",{parentName:"msup"},"string"))),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"(\\text{string}^{\\text{int}})^{\\text{string}}")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1.138262em",verticalAlign:"-0.25em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mopen"}),"("),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord text"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"string")),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.888262em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-3.12076em",marginRight:"0.05em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord text mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"int")))))))))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mclose"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mclose"}),")"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.830502em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-3.063em",marginRight:"0.05em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord text mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"string")))))))))))))),". If these types are truly equivalent,\nin the sense that every function in one corresponds to a unique function in the other,\nthen that suggests that there might be a general equivalence of the form"),Object(m.b)("div",{className:"math math-display"},Object(m.b)("span",Object(n.a)({parentName:"div"},{className:"katex-display"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("msup",{parentName:"mrow"},Object(m.b)("mi",{parentName:"msup"},"A"),Object(m.b)("mrow",{parentName:"msup"},Object(m.b)("mi",{parentName:"mrow"},"B"),Object(m.b)("mo",{parentName:"mrow"},"\xd7"),Object(m.b)("mi",{parentName:"mrow"},"C"))),Object(m.b)("mo",{parentName:"mrow"},"\u2261"),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),"("),Object(m.b)("msup",{parentName:"mrow"},Object(m.b)("mi",{parentName:"msup"},"A"),Object(m.b)("mi",{parentName:"msup"},"C")),Object(m.b)("msup",{parentName:"mrow"},Object(m.b)("mo",Object(n.a)({parentName:"msup"},{stretchy:"false"}),")"),Object(m.b)("mi",{parentName:"msup"},"B"))),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"A^{B\\times C}\\equiv(A^C)^B")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.891331em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"A"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.891331em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-3.113em",marginRight:"0.05em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault mtight",style:{marginRight:"0.05017em"}}),"B"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mbin mtight"}),"\xd7"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault mtight",style:{marginRight:"0.07153em"}}),"C"))))))))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u2261"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1.1413309999999999em",verticalAlign:"-0.25em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mopen"}),"("),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"A"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.8913309999999999em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-3.113em",marginRight:"0.05em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault mtight",style:{marginRight:"0.07153em"}}),"C")))))))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mclose"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mclose"}),")"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.8913309999999999em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-3.113em",marginRight:"0.05em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault mtight",style:{marginRight:"0.05017em"}}),"B"))))))))))))),Object(m.b)("p",null,"This is indeed true (and it should remind you of a corresponding fact about exponents from\nordinary algebra), and we can write the functions in ReasonML that mediate this\nequivalence:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let curry = (f: (('b, 'c)) => 'a) => {\n  (b: 'b) => (c: 'c) => f((b, c))\n};\nlet uncurry = (g: 'b => 'c => 'a) => {\n  ((b, c): ('b, 'c)) => g(b)(c)\n};\n")),Object(m.b)("p",null,"That is, given any function from the pair type ",Object(m.b)("inlineCode",{parentName:"p"},"('b, 'c)")," to ",Object(m.b)("inlineCode",{parentName:"p"},"'a")," (type variables in\nReasonML always start with an apostrophe (",Object(m.b)("inlineCode",{parentName:"p"},"'"),")), we can apply the ",Object(m.b)("inlineCode",{parentName:"p"},"curry")," function to\nit to get the corresponding curried function of type ",Object(m.b)("inlineCode",{parentName:"p"},"'b => 'c => 'a"),". The ",Object(m.b)("inlineCode",{parentName:"p"},"uncurry"),"\nfunction is the inverse of this. Since we have functions going each direction that\nare inverses to each other, this shows that the two types (or sets) are equivalent."),Object(m.b)("h2",{id:"type-aliases-and-parameterized-types"},"Type Aliases and Parameterized Types"),Object(m.b)("p",null,"Given the importance of types, and potentially complicated type expressions, in\nReasonML, it should not be a surprise that they can be named and manipulated\nmuch like ordinary values with variables and functions.",Object(m.b)("sup",Object(n.a)({parentName:"p"},{id:"fnref-4"}),Object(m.b)("a",Object(n.a)({parentName:"sup"},{href:"#fn-4",className:"footnote-ref"}),"4"))," We give a name to a type with the ",Object(m.b)("inlineCode",{parentName:"p"},"type")," statement:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"type int_point = (int, int);\ntype math_op = float => float => float;\nlet p: int_point = (5, 10);\nlet plus: math_op = (+.);\n")),Object(m.b)("p",null,"If we have a family of types where one or more parts can be substituted with an\narbitrary type, then we can introduce a ",Object(m.b)("strong",{parentName:"p"},"parameterized type alias")," by adding\ntype parameters. As we saw above, type variables start with an apostrophe:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"type point('a) = ('a, 'a);\ntype binary_op('operand, 'result) = 'operand => 'operand => 'result;\ntype printer('t) = 't => unit;\nlet p1: point(int) = (5, 10);\nlet p2: point(float) = (5.0, 10.0);\nlet int_plus: binary_op(int, int) = (+);\nlet string_eq: binary_op(string, bool) = (==);\nlet print_point: printer(point(int)) = ((x, y)) => {\n  Printf.printf(\"(%d, %d)\", x, y)\n};\nprint_point(p1);\n")),Object(m.b)("h2",{id:"constructors-and-variants"},"Constructors and Variants"),Object(m.b)("p",null,"A tuple is a rather generic way of packaging up data. When you are building a larger\nprogram, it would not be very meaningful to see a value like ",Object(m.b)("inlineCode",{parentName:"p"},'("Brian", 93)')," out of\ncontext. Just as programmers are encouraged to use symbolic names for constants (for\nexample, ",Object(m.b)("inlineCode",{parentName:"p"},"LINE_WIDTH")," instead of 80), we can attach names to particular uses of tuples\nto make them more readable and maintainable. If we create a type alias where the\nright-hand-side prefixes the tuple with a ",Object(m.b)("strong",{parentName:"p"},"constructor")," name (which needs to start\nwith a capital letter in ReasonML), then it will introduce a new type of tuples that\nneed to be labeled with that constructor:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'type grade_entry = Entry(string, int);\nlet entry = Entry("Brian", 93);\n')),Object(m.b)("p",null,"If we want to extract the components of this new type, we use a corresponding\nnamed pattern in the ",Object(m.b)("inlineCode",{parentName:"p"},"let")," binding:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let Entry(name, grade) = entry;\n")),Object(m.b)("p",null,"Here is another version of the ",Object(m.b)("inlineCode",{parentName:"p"},"format_grade")," example, using the above ",Object(m.b)("inlineCode",{parentName:"p"},"grade_entry"),"\ntype plus another that describes a particular grading item (with a title and maximum\nnumber of points). Even though both are essentially a pair of a string and an integer,\nwe can now tell them apart:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'type grade_entry = Entry(string, int);\ntype grading_item = Item(string, int);\nlet format_grade = (item, entry) => {\n  let Item(title, max) = item;\n  let Entry(name, grade) = entry;\n  name ++ ", " ++ title ++ ": " ++ string_of_int(grade) ++ "/" ++ string_of_int(max)\n};\nformat_grade(Item("Midterm", 100), Entry("Brian", 93));\n')),Object(m.b)("p",null,"So far we have seen types where all of the data have the same form: the same number\nof components, each with the same set of types, across all values of the type. However,\nmost interesting data will come in several forms, and our programs will need to make\nappropriate decisions based on the form of each piece of data."),Object(m.b)("h3",{id:"enumerations"},"Enumerations"),Object(m.b)("p",null,"The simplest case of having several ",Object(m.b)("strong",{parentName:"p"},"variants")," of a data type is an ",Object(m.b)("strong",{parentName:"p"},"enumeration"),".\nAn enumerated type is specified as a list of constant constructors, separated by vertical\nbars:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"type suit = Club | Diamond | Heart | Spade;\ntype rank = Ace | Two | Three | Four | Five | Six | Seven\n          | Eight | Nine | Ten | Jack | Queen | King;\n")),Object(m.b)("p",null,"Unlike the case with tuples or simple tuple-like constructors, we can not just\nexpect to match an enumerated value with a ",Object(m.b)("inlineCode",{parentName:"p"},"let")," binding. Instead, we need a construct\nthat gives us a selection among ",Object(m.b)("em",{parentName:"p"},"several")," bindings, one for each variant. In ReasonML,\nas in many programming languages, this construct is the ",Object(m.b)("inlineCode",{parentName:"p"},"switch")," expression (sometimes\ncalled a match or case statement):"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'let suit1 = Club;\nswitch (suit1) {\n| Club => "It\'s a club"\n| Diamond => "It\'s a diamond"\n| Heart => "It\'s a heart"\n| Spade => "It\'s a spade"\n};\n')),Object(m.b)("p",null,"Try changing the value bound to ",Object(m.b)("inlineCode",{parentName:"p"},"suit1")," and check the output. Each of the lines starting\nwith a vertical bar is one ",Object(m.b)("strong",{parentName:"p"},"case"),", and the expression to the right of the double arrow\nis the code to evaluate when that case matches the value in the switch."),Object(m.b)("p",null,"ReasonML will guarantee that the only possible values of an expression of an enumerated\ntype are those in the list, and it will also check whether all of the cases are covered\nin a switch. Try removing one of the cases above and see what happens."),Object(m.b)("h3",{id:"algebraic-data-types"},"Algebraic Data Types"),Object(m.b)("p",null,"By combining variants with tuple-like constructors, we get what are known as ",Object(m.b)("strong",{parentName:"p"},"algebraic\ndata types"),'. The idea is that the values of a type are formed by one of several\nconstructors, each of which takes some number of component values. If we think of a\ntuple as the "product" of its component types, and a variant as a "sum" of several\nchoices, then an algebraic type is just our old familiar sum-of-products construction\nfrom propositional logic!'),Object(m.b)("p",null,"For example, suppose we want a type that describes some shapes. A shape will be either\na rectangle, with a given width and height, or a circle, with a given radius. The\nvariant type may be defined as"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"type shape = Rectangle(float, float) | Circle(float);\n")),Object(m.b)("p",null,"Algebraically, this is the set ",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mtext",{parentName:"mrow"},"float"),Object(m.b)("mo",{parentName:"mrow"},"\xd7"),Object(m.b)("mtext",{parentName:"mrow"},"float"),Object(m.b)("mo",{parentName:"mrow"},"+"),Object(m.b)("mtext",{parentName:"mrow"},"float")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"\\text{float}\\times\\text{float} + \\text{float}")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.77777em",verticalAlign:"-0.08333em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord text"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"float")),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"\xd7"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.77777em",verticalAlign:"-0.08333em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord text"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"float")),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"+"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.69444em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord text"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"float")))))),", where\nthe ",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mo",{parentName:"mrow"},"+")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"+")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.66666em",verticalAlign:"-0.08333em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"+")))))," operation is forming a ",Object(m.b)("strong",{parentName:"p"},"disjoint sum")," of two sets","\u2014","similar to a union, but\nattaching some sort of tag to the element of each set so that there are no duplicates.",Object(m.b)("sup",Object(n.a)({parentName:"p"},{id:"fnref-5"}),Object(m.b)("a",Object(n.a)({parentName:"sup"},{href:"#fn-5",className:"footnote-ref"}),"5"))),Object(m.b)("p",null,"We may define a function to compute the area of a shape by doing a case analysis:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let area = sh => {\n  switch (sh) {\n  | Rectangle(width, height) => width *. height\n  | Circle(radius) => 3.141592653589 *. radius *. radius\n  }\n};\narea(Rectangle(5.0, 10.0));\narea(Circle(10.0));\n")),Object(m.b)("p",null,"If you are familiar with interfaces and subclasses in an object-oriented language such\nas Java, it is instructive to compare this with a typical object-oriented approach:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"interface Shape {\n  double area();\n}\n\nclass Rectangle implements Shape {\n  private double width, height;\n\n  public Rectangle(double width, double height) {\n    this.width = width;\n    this.height = height;\n  }\n\n  public double area() {\n    return width * height;\n  }\n}\n\nclass Circle implements Shape {\n  private double radius;\n\n  public Circle(double radius) {\n    this.radius = radius;\n  }\n\n  public double area() {\n    return 3.141592653589 * radius * radius;\n  }\n}\n")),Object(m.b)("p",null,"In Java, each class implementing ",Object(m.b)("inlineCode",{parentName:"p"},"Shape")," is one variant, and the interface\nrequires it to provide an ",Object(m.b)("inlineCode",{parentName:"p"},"area")," method with the correct signature. When we\nexecute code such as ",Object(m.b)("inlineCode",{parentName:"p"},"sh.area()"),", where ",Object(m.b)("inlineCode",{parentName:"p"},"sh")," is a variable of type ",Object(m.b)("inlineCode",{parentName:"p"},"Shape"),",\nthe underlying Java virtual machine code essentially does a case analysis\nof the object currently in ",Object(m.b)("inlineCode",{parentName:"p"},"sh")," to determine which ",Object(m.b)("inlineCode",{parentName:"p"},"area")," method to run."),Object(m.b)("p",null,"One difference between the functional and object-oriented approaches is that\nthe functional version makes it easy to add new operations (such as a\n",Object(m.b)("inlineCode",{parentName:"p"},"perimeter")," function), but to change the list of variants (for example, to\nadd triangular shapes) is hard because we have to add a case to all of the\nexisting operations. Conversely, the object-oriented version makes it easy to\nadd new variants (just define another class implementing ",Object(m.b)("inlineCode",{parentName:"p"},"Shape"),"), but if we\nwant to add a new operation to the interface (such as ",Object(m.b)("inlineCode",{parentName:"p"},"perimeter"),") we need\nto implement that method in all of the existing subclasses. This tradeoff\nhas led to considerable work on hybrid object-functional languages, such as\nScala."),Object(m.b)("h3",{id:"pattern-matching"},"Pattern Matching"),Object(m.b)("p",null,"The pattern matching case analysis in a switch statement can be very powerful,\nsince patterns may contain other patterns. We may match on not only variants,\nconstructors, and tuples, but also on individual primitive values (such as\nintegers or strings). As long as the patterns cover all of the cases, they\nare allowed to overlap (that is, more than one pattern might match a given\nvalue); if so, then the first matching case is selected. At any point in a\npattern we may use the special ",Object(m.b)("strong",{parentName:"p"},"wildcard")," pattern, underscore (",Object(m.b)("inlineCode",{parentName:"p"},"_"),'), which\nwill match any value (but not bind it to anything). Switch statements will\noften have a final case matching the wildcard pattern as a "default" case.'),Object(m.b)("p",null,"For example, here are some functions using the playing card enumerations\nfrom above. First we will define a variant for a playing card, which is either\nan ordinary card with a rank and a suit, or a joker:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"type card = Card(rank, suit) | Joker;\nlet card1 = Card(Two, Club);\nlet card2 = Card(Jack, Spade);\nlet card3 = Card(Ace, Heart);\nlet card4 = Joker;\n")),Object(m.b)("p",null,"Here is a function that determines whether a card is a face card:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let isFace = c => {\n  switch (c) {\n  | Card(Jack, _) => true\n  | Card(Queen, _) => true\n  | Card(King, _) => true\n  | _ => false\n  }\n};\nisFace(card2);\nisFace(card3);\n")),Object(m.b)("p",null,'Here is a function that tells us if a card is "wild", if we are playing a friendly\ngame where jokers and black twos are wild:'),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let isWild = c => {\n  switch (c) {\n  | Card(Two, Club) => true\n  | Card(Two, Spade) => true\n  | Joker => true\n  | _ => false\n  }\n};\nisWild(card1);\nisWild(card2);\nisWild(card3);\nisWild(card4);\n")),Object(m.b)("p",null,'Finally, here is a function that will take two cards plus a string, either\n"high" or "low". It will return the card with the higher rank; if they have the\nsame rank, it will just return the first card. If the string argument is "high",\nthen aces will rank higher than kings, otherwise they will rank lower than twos\n(this is somewhat artificial, but I want to show an example with a string\npattern). Jokers are always the highest. The code takes advantage of the\nordering automatically defined on an enumeration, where earlier variants are\nless than (',Object(m.b)("inlineCode",{parentName:"p"},"<"),") later ones:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'let higher = (c1, c2, rule) => {\n  switch ((c1, c2, rule)) {\n  /* First handle the Jokers */\n  | (Joker, _, _) => c1\n  | (_, Joker, _) => c2\n  /* Handle all of the Ace cases now */\n  | (Card(Ace, _), _, "high") => c1\n  | (_, Card(Ace, _), "high") => c2 \n  | (_, Card(Ace, _), "low") => c1\n  | (Card(Ace, _), _, "low") => c2\n  /* Handle the remaining cases by comparison */\n  | (Card(rank1, _), Card(rank2, _), _) =>\n      if (rank1 >= rank2) {\n        c1\n      } else {\n        c2\n      }\n  }\n}\nhigher(card1, card2, "high"); /* should be the Jack */\nhigher(card1, card3, "high"); /* should be the Ace */\nhigher(card1, card3, "low"); /* should be the Two */\nhigher(card3, card4, "high"); /* should be the Joker */\n')),Object(m.b)("h3",{id:"recursive-types"},"Recursive Types"),Object(m.b)("p",null,"When we define a type with the ",Object(m.b)("inlineCode",{parentName:"p"},"type")," statement, the right-hand-side is allowed to\nrefer to the new type when assigning the types of components. When specifying such\na ",Object(m.b)("strong",{parentName:"p"},"recursive type")," there generally needs to be a variant that does not refer to\nthe new type, to serve as a base case (otherwise it is difficult to get off the\nground when building values of the type). Here are two characteristic examples\nthat we will be exploring more later:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"type myList = Empty | ListNode(int, myList);\ntype myTree('a, 'b) = Leaf('a) | TreeNode(myTree('a, 'b), 'b, myTree('a, 'b));\n")),Object(m.b)("p",null,"The type ",Object(m.b)("inlineCode",{parentName:"p"},"myList")," represents linked lists of integers. Each value is either\nan empty list or a list node containing an integer and a value for the rest of\nthe list. For example, the list ",Object(m.b)("inlineCode",{parentName:"p"},"[1, 2, 3]")," would be represented by the following\nvalue:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let list123 = ListNode(1, ListNode(2, ListNode(3, Empty)));\n")),Object(m.b)("p",null,"The natural way to write a function over such a list is by pattern matching, with\nthe additional wrinkle that we may recursively use the function to process the\nrest of the list (since it is a smaller list, we can use structural induction to\nprove properties of such a function). Here is a function to add up the numbers\nin a list:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let rec sumList = nums => {\n  switch (nums) {\n  | Empty => 0\n  | ListNode(n, rest) => n + sumList(rest)\n  }\n};\nsumList(list123);\n")),Object(m.b)("p",null,"The type ",Object(m.b)("inlineCode",{parentName:"p"},"myTree('a, 'b)")," is a parameterized type. It represents binary trees that\nare either leaves containing a value of type ",Object(m.b)("inlineCode",{parentName:"p"},"'a"),", or tree nodes that contain two\nsubtrees and a value of type ",Object(m.b)("inlineCode",{parentName:"p"},"'b"),". For example, here is a tree with integers in the\nleaves and string labels on the interior nodes; it is meant to represent the\narithmetic expression ",Object(m.b)("inlineCode",{parentName:"p"},"1 + 2 * 3"),":"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'let tree123 = TreeNode(Leaf(1), "+", TreeNode(Leaf(2), "*", Leaf(3)));\n')),Object(m.b)("p",null,"Here is a function defined by pattern matching over trees that evaluates such an\nexpression:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'let rec eval = t => {\n  switch (t) {\n  | Leaf(n) => n\n  | TreeNode(left, "+", right) => eval(left) + eval(right)\n  | TreeNode(left, "*", right) => eval(left) * eval(right)\n  }\n};\neval(tree123);\n')),Object(m.b)("p",null,"Note that we get a warning that the pattern match is not exhaustive, because we\ndon't provide cases for all of the possible operator strings. We will look at\nbetter solutions for this eventually."),Object(m.b)("h2",{id:"connection-to-natural-deduction"},"Connection to Natural Deduction"),Object(m.b)("p",null,'Finally, here is the "big reveal" about natural deduction. The proofs that we\nconstructed were really just programs in a close relative of ReasonML! Here is\na table explaining the analogy:'),Object(m.b)("table",null,Object(m.b)("thead",{parentName:"table"},Object(m.b)("tr",{parentName:"thead"},Object(m.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Functional Programming"),Object(m.b)("th",Object(n.a)({parentName:"tr"},{align:"left"}),"Natural Deduction"))),Object(m.b)("tbody",{parentName:"table"},Object(m.b)("tr",{parentName:"tbody"},Object(m.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"function type ",Object(m.b)("inlineCode",{parentName:"td"},"A => B")),Object(m.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"implication ",Object(m.b)("span",Object(n.a)({parentName:"td"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"A"),Object(m.b)("mo",{parentName:"mrow"},"\u2192"),Object(m.b)("mi",{parentName:"mrow"},"B")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"A\\rightarrow B")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"A"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u2192"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.05017em"}}),"B"))))))),Object(m.b)("tr",{parentName:"tbody"},Object(m.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"function value ",Object(m.b)("inlineCode",{parentName:"td"},"(x: A) => { ... body of type B ... }")),Object(m.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(m.b)("span",Object(n.a)({parentName:"td"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mo",{parentName:"mrow"},"\u2192")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"\\rightarrow")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.36687em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u2192")))))," Introduction")),Object(m.b)("tr",{parentName:"tbody"},Object(m.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"application ",Object(m.b)("inlineCode",{parentName:"td"},"f(a)")),Object(m.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(m.b)("span",Object(n.a)({parentName:"td"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mo",{parentName:"mrow"},"\u2192")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"\\rightarrow")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.36687em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u2192")))))," Elimination, from ",Object(m.b)("span",Object(n.a)({parentName:"td"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"f"),Object(m.b)("mo",{parentName:"mrow"},":"),Object(m.b)("mi",{parentName:"mrow"},"A"),Object(m.b)("mo",{parentName:"mrow"},"\u2192"),Object(m.b)("mi",{parentName:"mrow"},"B")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"f: A\\rightarrow B")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.8888799999999999em",verticalAlign:"-0.19444em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.10764em"}}),"f"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),":"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"A"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u2192"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.05017em"}}),"B")))))," and ",Object(m.b)("span",Object(n.a)({parentName:"td"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"a"),Object(m.b)("mo",{parentName:"mrow"},":"),Object(m.b)("mi",{parentName:"mrow"},"A")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"a: A")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"a"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),":"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"A"))))))),Object(m.b)("tr",{parentName:"tbody"},Object(m.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"tuple type ",Object(m.b)("inlineCode",{parentName:"td"},"(A, B)")),Object(m.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"conjunction ",Object(m.b)("span",Object(n.a)({parentName:"td"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"A"),Object(m.b)("mo",{parentName:"mrow"},"\u2227"),Object(m.b)("mi",{parentName:"mrow"},"B")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"A\\land B")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"A"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"\u2227"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.05017em"}}),"B"))))))),Object(m.b)("tr",{parentName:"tbody"},Object(m.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"tuple value ",Object(m.b)("inlineCode",{parentName:"td"},"(a, b)")),Object(m.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(m.b)("span",Object(n.a)({parentName:"td"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mo",{parentName:"mrow"},"\u2227")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"\\land")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.55556em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\u2227")))))," Introduction from ",Object(m.b)("span",Object(n.a)({parentName:"td"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"a"),Object(m.b)("mo",{parentName:"mrow"},":"),Object(m.b)("mi",{parentName:"mrow"},"A")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"a: A")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"a"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),":"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"A")))))," and ",Object(m.b)("span",Object(n.a)({parentName:"td"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"b"),Object(m.b)("mo",{parentName:"mrow"},":"),Object(m.b)("mi",{parentName:"mrow"},"B")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"b: B")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.69444em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"b"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),":"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.05017em"}}),"B"))))))),Object(m.b)("tr",{parentName:"tbody"},Object(m.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"projections ",Object(m.b)("inlineCode",{parentName:"td"},"fst"),", ",Object(m.b)("inlineCode",{parentName:"td"},"snd")),Object(m.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(m.b)("span",Object(n.a)({parentName:"td"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mo",{parentName:"mrow"},"\u2227")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"\\land")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.55556em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\u2227")))))," Elimination 1 and 2")),Object(m.b)("tr",{parentName:"tbody"},Object(m.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"variant type ",Object(m.b)("inlineCode",{parentName:"td"},"Left(A)")," ","|"," ",Object(m.b)("inlineCode",{parentName:"td"},"Right(B)")),Object(m.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"disjunction ",Object(m.b)("span",Object(n.a)({parentName:"td"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"A"),Object(m.b)("mo",{parentName:"mrow"},"\u2228"),Object(m.b)("mi",{parentName:"mrow"},"B")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"A\\lor B")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"A"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"\u2228"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.05017em"}}),"B"))))))),Object(m.b)("tr",{parentName:"tbody"},Object(m.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"constructors ",Object(m.b)("inlineCode",{parentName:"td"},"Left"),", ",Object(m.b)("inlineCode",{parentName:"td"},"Right")),Object(m.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(m.b)("span",Object(n.a)({parentName:"td"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mo",{parentName:"mrow"},"\u2228")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"\\lor")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.55556em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\u2228")))))," Introduction 1 and 2")),Object(m.b)("tr",{parentName:"tbody"},Object(m.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"switch statement"),Object(m.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(m.b)("span",Object(n.a)({parentName:"td"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mo",{parentName:"mrow"},"\u2228")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"\\lor")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.55556em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\u2228")))))," Elimination")),Object(m.b)("tr",{parentName:"tbody"},Object(m.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(m.b)("inlineCode",{parentName:"td"},"unit")," type"),Object(m.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),Object(m.b)("span",Object(n.a)({parentName:"td"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"double-struck"}),"T")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"\\T")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68889em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathbb"}),"T")))))))))),Object(m.b)("p",null,"The most complicated comparison here is viewing the switch statement as doing ",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mo",{parentName:"mrow"},"\u2228")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"\\lor")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.55556em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\u2228"))))),"\nelimination. Consider a proof such as"),Object(m.b)("div",{className:"math math-display"},Object(m.b)("span",Object(n.a)({parentName:"div"},{className:"katex-display"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mtable",Object(n.a)({parentName:"semantics"},{rowspacing:"0.15999999999999992em",columnalign:"left left",columnlines:"solid",columnspacing:"1em"}),Object(m.b)("mtr",{parentName:"mtable"},Object(m.b)("mtd",{parentName:"mtr"},Object(m.b)("mstyle",Object(n.a)({parentName:"mtd"},{scriptlevel:"0",displaystyle:"false"}),Object(m.b)("mrow",{parentName:"mstyle"},Object(m.b)("msub",{parentName:"mrow"},Object(m.b)("mi",Object(n.a)({parentName:"msub"},{mathvariant:"normal"}),"\u2113"),Object(m.b)("mn",{parentName:"msub"},"1")),Object(m.b)("mo",{parentName:"mrow"},":"),Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow"},"\u2228"),Object(m.b)("mi",{parentName:"mrow"},"q")))),Object(m.b)("mtd",{parentName:"mtr"},Object(m.b)("mstyle",Object(n.a)({parentName:"mtd"},{scriptlevel:"0",displaystyle:"false"}),Object(m.b)("mtext",{parentName:"mstyle"},"premise")))),Object(m.b)("mtr",{parentName:"mtable"},Object(m.b)("mtd",{parentName:"mtr"},Object(m.b)("mstyle",Object(n.a)({parentName:"mtd"},{scriptlevel:"0",displaystyle:"false"}),Object(m.b)("mrow",{parentName:"mstyle"},Object(m.b)("msub",{parentName:"mrow"},Object(m.b)("mi",Object(n.a)({parentName:"msub"},{mathvariant:"normal"}),"\u2113"),Object(m.b)("mn",{parentName:"msub"},"2")),Object(m.b)("mo",{parentName:"mrow"},":"),Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow"},"\u21d2"),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),"{"))))),Object(m.b)("mtr",{parentName:"mtable"},Object(m.b)("mtd",{parentName:"mtr"},Object(m.b)("mstyle",Object(n.a)({parentName:"mtd"},{scriptlevel:"0",displaystyle:"false"}),Object(m.b)("mrow",{parentName:"mstyle"},Object(m.b)("mspace",Object(n.a)({parentName:"mrow"},{width:"1em"})),Object(m.b)("msub",{parentName:"mrow"},Object(m.b)("mi",Object(n.a)({parentName:"msub"},{mathvariant:"normal"}),"\u2113"),Object(m.b)("mn",{parentName:"msub"},"3")),Object(m.b)("mo",{parentName:"mrow"},":"),Object(m.b)("mi",{parentName:"mrow"},"q"),Object(m.b)("mo",{parentName:"mrow"},"\u2228"),Object(m.b)("mi",{parentName:"mrow"},"p")))),Object(m.b)("mtd",{parentName:"mtr"},Object(m.b)("mstyle",Object(n.a)({parentName:"mtd"},{scriptlevel:"0",displaystyle:"false"}),Object(m.b)("mrow",{parentName:"mstyle"},Object(m.b)("mo",{parentName:"mrow"},"\u2228"),Object(m.b)("msub",{parentName:"mrow"},Object(m.b)("mi",{parentName:"msub"},"I"),Object(m.b)("mn",{parentName:"msub"},"2")),Object(m.b)("mtext",{parentName:"mrow"},"\xa0"),Object(m.b)("msub",{parentName:"mrow"},Object(m.b)("mi",Object(n.a)({parentName:"msub"},{mathvariant:"normal"}),"\u2113"),Object(m.b)("mn",{parentName:"msub"},"2")))))),Object(m.b)("mtr",{parentName:"mtable"},Object(m.b)("mtd",{parentName:"mtr"},Object(m.b)("mstyle",Object(n.a)({parentName:"mtd"},{scriptlevel:"0",displaystyle:"false"}),Object(m.b)("mo",Object(n.a)({parentName:"mstyle"},{stretchy:"false",lspace:"0em",rspace:"0em"}),"}")))),Object(m.b)("mtr",{parentName:"mtable"},Object(m.b)("mtd",{parentName:"mtr"},Object(m.b)("mstyle",Object(n.a)({parentName:"mtd"},{scriptlevel:"0",displaystyle:"false"}),Object(m.b)("mrow",{parentName:"mstyle"},Object(m.b)("msub",{parentName:"mrow"},Object(m.b)("mi",Object(n.a)({parentName:"msub"},{mathvariant:"normal"}),"\u2113"),Object(m.b)("mn",{parentName:"msub"},"4")),Object(m.b)("mo",{parentName:"mrow"},":"),Object(m.b)("mi",{parentName:"mrow"},"q"),Object(m.b)("mo",{parentName:"mrow"},"\u21d2"),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),"{"))))),Object(m.b)("mtr",{parentName:"mtable"},Object(m.b)("mtd",{parentName:"mtr"},Object(m.b)("mstyle",Object(n.a)({parentName:"mtd"},{scriptlevel:"0",displaystyle:"false"}),Object(m.b)("mrow",{parentName:"mstyle"},Object(m.b)("mspace",Object(n.a)({parentName:"mrow"},{width:"1em"})),Object(m.b)("msub",{parentName:"mrow"},Object(m.b)("mi",Object(n.a)({parentName:"msub"},{mathvariant:"normal"}),"\u2113"),Object(m.b)("mn",{parentName:"msub"},"5")),Object(m.b)("mo",{parentName:"mrow"},":"),Object(m.b)("mi",{parentName:"mrow"},"q"),Object(m.b)("mo",{parentName:"mrow"},"\u2228"),Object(m.b)("mi",{parentName:"mrow"},"p")))),Object(m.b)("mtd",{parentName:"mtr"},Object(m.b)("mstyle",Object(n.a)({parentName:"mtd"},{scriptlevel:"0",displaystyle:"false"}),Object(m.b)("mrow",{parentName:"mstyle"},Object(m.b)("mo",{parentName:"mrow"},"\u2228"),Object(m.b)("msub",{parentName:"mrow"},Object(m.b)("mi",{parentName:"msub"},"I"),Object(m.b)("mn",{parentName:"msub"},"1")),Object(m.b)("mtext",{parentName:"mrow"},"\xa0"),Object(m.b)("msub",{parentName:"mrow"},Object(m.b)("mi",Object(n.a)({parentName:"msub"},{mathvariant:"normal"}),"\u2113"),Object(m.b)("mn",{parentName:"msub"},"2")))))),Object(m.b)("mtr",{parentName:"mtable"},Object(m.b)("mtd",{parentName:"mtr"},Object(m.b)("mstyle",Object(n.a)({parentName:"mtd"},{scriptlevel:"0",displaystyle:"false"}),Object(m.b)("mo",Object(n.a)({parentName:"mstyle"},{stretchy:"false",lspace:"0em",rspace:"0em"}),"}")))),Object(m.b)("mtr",{parentName:"mtable"},Object(m.b)("mtd",{parentName:"mtr"},Object(m.b)("mstyle",Object(n.a)({parentName:"mtd"},{scriptlevel:"0",displaystyle:"false"}),Object(m.b)("mrow",{parentName:"mstyle"},Object(m.b)("msub",{parentName:"mrow"},Object(m.b)("mi",Object(n.a)({parentName:"msub"},{mathvariant:"normal"}),"\u2113"),Object(m.b)("mn",{parentName:"msub"},"6")),Object(m.b)("mo",{parentName:"mrow"},":"),Object(m.b)("mi",{parentName:"mrow"},"q"),Object(m.b)("mo",{parentName:"mrow"},"\u2228"),Object(m.b)("mi",{parentName:"mrow"},"p")))),Object(m.b)("mtd",{parentName:"mtr"},Object(m.b)("mstyle",Object(n.a)({parentName:"mtd"},{scriptlevel:"0",displaystyle:"false"}),Object(m.b)("mrow",{parentName:"mstyle"},Object(m.b)("mo",{parentName:"mrow"},"\u2228"),Object(m.b)("mi",{parentName:"mrow"},"E"),Object(m.b)("mtext",{parentName:"mrow"},"\xa0"),Object(m.b)("msub",{parentName:"mrow"},Object(m.b)("mi",Object(n.a)({parentName:"msub"},{mathvariant:"normal"}),"\u2113"),Object(m.b)("mn",{parentName:"msub"},"1")),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{separator:"true"}),","),Object(m.b)("msub",{parentName:"mrow"},Object(m.b)("mi",Object(n.a)({parentName:"msub"},{mathvariant:"normal"}),"\u2113"),Object(m.b)("mn",{parentName:"msub"},"2")),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{separator:"true"}),","),Object(m.b)("msub",{parentName:"mrow"},Object(m.b)("mi",Object(n.a)({parentName:"msub"},{mathvariant:"normal"}),"\u2113"),Object(m.b)("mn",{parentName:"msub"},"4"))))))),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"\\begin{array}{l|l} \\ell_1: p\\lor q & \\text{premise}\\\\ \\ell_2: p\\Rightarrow\\{\\\\ \\quad\\ell_3: q\\lor p & \\lor I_2\\ \\ell_2\\\\ \\}\\\\ \\ell_4: q\\Rightarrow\\{\\\\ \\quad\\ell_5: q\\lor p & \\lor I_1\\ \\ell_2\\\\ \\}\\\\ \\ell_6: q\\lor p & \\lor E\\ \\ell_1, \\ell_2, \\ell_4 \\end{array}")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"9.600000000000001em",verticalAlign:"-4.55em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mtable"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"arraycolsep",style:{width:"0.5em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"col-align-l"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t vlist-t2"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"5.050000000000001em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-7.21em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"3em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\u2113"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t vlist-t2"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.30110799999999993em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"1")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-s"}),"\u200b")),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.15em"}}),Object(m.b)("span",{parentName:"span"})))))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),":"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"p"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"\u2228"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.03588em"}}),"q"))),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-6.010000000000001em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"3em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\u2113"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t vlist-t2"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.30110799999999993em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"2")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-s"}),"\u200b")),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.15em"}}),Object(m.b)("span",{parentName:"span"})))))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),":"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"p"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u21d2"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mopen"}),"{"))),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-4.8100000000000005em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"3em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"1em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\u2113"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t vlist-t2"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.30110799999999993em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"3")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-s"}),"\u200b")),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.15em"}}),Object(m.b)("span",{parentName:"span"})))))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),":"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.03588em"}}),"q"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"\u2228"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"p"))),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-3.61em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"3em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mclose"}),"}"))),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-2.4099999999999997em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"3em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\u2113"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t vlist-t2"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.30110799999999993em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"4")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-s"}),"\u200b")),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.15em"}}),Object(m.b)("span",{parentName:"span"})))))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),":"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.03588em"}}),"q"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u21d2"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mopen"}),"{"))),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-1.2099999999999997em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"3em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"1em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\u2113"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t vlist-t2"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.30110799999999993em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"5")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-s"}),"\u200b")),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.15em"}}),Object(m.b)("span",{parentName:"span"})))))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),":"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.03588em"}}),"q"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"\u2228"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"p"))),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-0.00999999999999951em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"3em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mclose"}),"}"))),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"1.1899999999999997em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"3em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\u2113"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t vlist-t2"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.30110799999999993em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"6")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-s"}),"\u200b")),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.15em"}}),Object(m.b)("span",{parentName:"span"})))))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),":"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.03588em"}}),"q"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"\u2228"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"p")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-s"}),"\u200b")),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"4.55em"}}),Object(m.b)("span",{parentName:"span"}))))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"arraycolsep",style:{width:"0.5em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vertical-separator",style:{height:"9.6em",borderRightWidth:"0.04em",borderRightStyle:"solid",margin:"0 -0.02em",verticalAlign:"-4.55em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"arraycolsep",style:{width:"0.5em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"col-align-l"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t vlist-t2"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"5.050000000000001em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-7.21em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"3em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord text"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"premise")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-4.8100000000000005em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"3em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\u2228"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.07847em"}}),"I"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t vlist-t2"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.30110799999999993em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-2.5500000000000003em",marginLeft:"-0.07847em",marginRight:"0.05em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"2")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-s"}),"\u200b")),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.15em"}}),Object(m.b)("span",{parentName:"span"})))))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace"}),"\xa0"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\u2113"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t vlist-t2"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.30110799999999993em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"2")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-s"}),"\u200b")),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.15em"}}),Object(m.b)("span",{parentName:"span"})))))))),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-1.2099999999999997em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"3em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\u2228"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.07847em"}}),"I"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t vlist-t2"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.30110799999999993em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-2.5500000000000003em",marginLeft:"-0.07847em",marginRight:"0.05em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"1")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-s"}),"\u200b")),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.15em"}}),Object(m.b)("span",{parentName:"span"})))))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace"}),"\xa0"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\u2113"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t vlist-t2"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.30110799999999993em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"2")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-s"}),"\u200b")),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.15em"}}),Object(m.b)("span",{parentName:"span"})))))))),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"1.1899999999999997em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"3em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\u2228"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.05764em"}}),"E"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace"}),"\xa0"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\u2113"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t vlist-t2"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.30110799999999993em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"1")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-s"}),"\u200b")),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.15em"}}),Object(m.b)("span",{parentName:"span"})))))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mpunct"}),","),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.16666666666666666em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\u2113"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t vlist-t2"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.30110799999999993em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"2")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-s"}),"\u200b")),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.15em"}}),Object(m.b)("span",{parentName:"span"})))))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mpunct"}),","),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.16666666666666666em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\u2113"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t vlist-t2"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.30110799999999993em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"4")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-s"}),"\u200b")),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.15em"}}),Object(m.b)("span",{parentName:"span"}))))))))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-s"}),"\u200b")),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"4.55em"}}),Object(m.b)("span",{parentName:"span"}))))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"arraycolsep",style:{width:"0.5em"}}))))))))),Object(m.b)("p",null,"Here is an analogous ReasonML function:"),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"type disj('a, 'b) = Left('a) | Right('b);\nlet orCommutative: disj('a, 'b) => disj('b, 'a) = (l1: disj('a, 'b)) => {\n  let l6: disj('b, 'a) = switch (l1) {\n  | Left(l2: 'a) => {\n      let l3: disj('b, 'a) = Right(l2);\n      l3\n    }\n  | Right(l4: 'b) => {\n      let l5: disj('b, 'a) = Left(l4);\n      l5\n    }\n  };\n  l6\n};\norCommutative(Left(42));\norCommutative(Right(\"hello\"));\n")),Object(m.b)("p",null,"More idiomatically, taking advantage of type inference and not using so many\n",Object(m.b)("inlineCode",{parentName:"p"},"let"),' statements to label each "line" of the proof, we can write this as:'),Object(m.b)("pre",null,Object(m.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'let orCommutative = a_or_b => {\n  switch (a_or_b) {\n  | Left(a) => Right(a)\n  | Right(b) => Left(b)\n  }\n};\norCommutative(Left(42));\norCommutative(Right("hello"));\n')),Object(m.b)("p",null,'One of the very powerful aspects of this analogy between typed functional\nprogramming and logical proofs is that, for those parts of a program that\nare just doing the "administrative" work of shuffling around pieces of\ndata structures in a generic way, there is just one straightforward way to\nput the pieces together that will satisfy the type-checker. Writing this\nkind of program is akin to proving an equivalence in logic, and there is\na strong hope that this sort of code could be generated automatically, or\nat least with significant machine assistance, leaving programmers to work\non the more interesting parts of the problem.'),Object(m.b)("p",null,"Missing from this analogy is how to treat negation and contradiction (",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"double-struck"}),"F")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"\\F")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68889em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathbb"}),"F")))))),").\nThe simplest approach in ReasonML is probably to treat negation ",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"\xac"),Object(m.b)("mi",{parentName:"mrow"},"A")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"\\lnot A")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\xac"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"A")))))," as\nequivalent to the implication ",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"A"),Object(m.b)("mo",{parentName:"mrow"},"\u2192"),Object(m.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"double-struck"}),"F")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"A\\rightarrow\\F")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"A"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u2192"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68889em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathbb"}),"F")))))),". We do not have a type that\ncorresponds to ",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"double-struck"}),"F")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"\\F")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68889em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathbb"}),"F")))))),", because there are not supposed to be any values of that\ntype (since they would correspond to proofs of a contradiction!). However,\nwe can extend our analogy so that reaching a contradiction is like throwing\nan exception to abort the program. In ReasonML, the expression ",Object(m.b)("inlineCode",{parentName:"p"},"raise Exit"),"\nmay be used where ",Object(m.b)("em",{parentName:"p"},"any")," type of value is expected, and if it is evaluated then\nthe program will abort (unless we have an exception handler in place","\u2026",").\nThis corresponds to ",Object(m.b)("em",{parentName:"p"},"ex falso quodlibet"),", the ",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"double-struck"}),"F")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"\\F")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68889em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathbb"}),"F"))))))," elimination rule: if we\nreach a contradiction, we can get a proof of any proposition, ",Object(m.b)("em",{parentName:"p"},"i.e."),", a result\nof any type. If negation is an implication of ",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"double-struck"}),"F")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"\\F")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68889em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathbb"}),"F")))))),", then the analogue to\n",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"\xac"),Object(m.b)("mi",{parentName:"mrow"},"A")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"\\lnot A")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\xac"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"A")))))," in ReasonML would be a function that takes a parameter of type ",Object(m.b)("inlineCode",{parentName:"p"},"A"),"\nand throws an exception","\u2014","if it is truly the case that there is no value\nof type ",Object(m.b)("inlineCode",{parentName:"p"},"A")," (that is, no proof of ",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"A")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"A")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"A"))))),", which is what we would hope if ",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"\xac"),Object(m.b)("mi",{parentName:"mrow"},"A")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"\\lnot A")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\xac"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"A"))))),"\nis true), then this function can never be called.",Object(m.b)("sup",Object(n.a)({parentName:"p"},{id:"fnref-6"}),Object(m.b)("a",Object(n.a)({parentName:"sup"},{href:"#fn-6",className:"footnote-ref"}),"6"))),Object(m.b)("h2",{id:"exercises"},"Exercises"),Object(m.b)("ol",null,Object(m.b)("li",{parentName:"ol"},Object(m.b)("p",{parentName:"li"},"Write ReasonML functions that compute the inclusive and exclusive OR\noperations. That is, write Boolean functions ",Object(m.b)("inlineCode",{parentName:"p"},"or(x, y)")," and ",Object(m.b)("inlineCode",{parentName:"p"},"xor(x, y)")," that\nwill return ",Object(m.b)("inlineCode",{parentName:"p"},"true")," if one of ",Object(m.b)("inlineCode",{parentName:"p"},"x")," or ",Object(m.b)("inlineCode",{parentName:"p"},"y")," is ",Object(m.b)("inlineCode",{parentName:"p"},"true"),"; in the inclusive case,\n",Object(m.b)("inlineCode",{parentName:"p"},"or(true, true)")," is also ",Object(m.b)("inlineCode",{parentName:"p"},"true"),", while for the exclusive case,\n",Object(m.b)("inlineCode",{parentName:"p"},"xor(true, true)")," is ",Object(m.b)("inlineCode",{parentName:"p"},"false"),". Use pattern matching for one, and ",Object(m.b)("inlineCode",{parentName:"p"},"if"),"\nexpressions for the other (but do not use the built-in logical operators such\nas ",Object(m.b)("inlineCode",{parentName:"p"},"||"),").")),Object(m.b)("li",{parentName:"ol"},Object(m.b)("p",{parentName:"li"},"Add a ",Object(m.b)("inlineCode",{parentName:"p"},"Triangle")," variant to the ",Object(m.b)("inlineCode",{parentName:"p"},"shape")," type above. The constructor should\ntake two floats: the base and the height. Extend the ",Object(m.b)("inlineCode",{parentName:"p"},"area")," function to\nhandle triangles, and then define a ",Object(m.b)("inlineCode",{parentName:"p"},"perimeter")," function for shapes.")),Object(m.b)("li",{parentName:"ol"},Object(m.b)("p",{parentName:"li"},"Define a function that takes a ",Object(m.b)("inlineCode",{parentName:"p"},"myTree('a, 'b)")," value and counts the number\nof leaves. That is, the function call\n",Object(m.b)("inlineCode",{parentName:"p"},'numLeaves(TreeNode(Leaf(27), "+", TreeNode(Leaf(3), "*", Leaf(5))))'),"\nshould return 3. ",Object(m.b)("em",{parentName:"p"},"Hint:")," Define it using a pattern match.")),Object(m.b)("li",{parentName:"ol"},Object(m.b)("p",{parentName:"li"},"Based on the ",Object(m.b)("inlineCode",{parentName:"p"},"curry")," and ",Object(m.b)("inlineCode",{parentName:"p"},"uncurry")," functions, give a natural deduction proof\nof the arguments ",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),"("),Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow"},"\u2227"),Object(m.b)("mi",{parentName:"mrow"},"q"),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),")"),Object(m.b)("mo",{parentName:"mrow"},"\u2192"),Object(m.b)("mi",{parentName:"mrow"},"r"),Object(m.b)("mo",{parentName:"mrow"},"\u22a2"),Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow"},"\u2192"),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),"("),Object(m.b)("mi",{parentName:"mrow"},"q"),Object(m.b)("mo",{parentName:"mrow"},"\u2192"),Object(m.b)("mi",{parentName:"mrow"},"r"),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),")")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"(p\\land q)\\rightarrow r\\vdash p\\rightarrow(q\\rightarrow r)")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mopen"}),"("),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"p"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"\u2227"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.03588em"}}),"q"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mclose"}),")"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u2192"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.69444em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.02778em"}}),"r"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u22a2"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.625em",verticalAlign:"-0.19444em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"p"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u2192"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mopen"}),"("),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.03588em"}}),"q"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u2192"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.02778em"}}),"r"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mclose"}),")"))))),"\nand its converse ",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow"},"\u2192"),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),"("),Object(m.b)("mi",{parentName:"mrow"},"q"),Object(m.b)("mo",{parentName:"mrow"},"\u2192"),Object(m.b)("mi",{parentName:"mrow"},"r"),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),")"),Object(m.b)("mo",{parentName:"mrow"},"\u22a2"),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),"("),Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow"},"\u2227"),Object(m.b)("mi",{parentName:"mrow"},"q"),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),")"),Object(m.b)("mo",{parentName:"mrow"},"\u2192"),Object(m.b)("mi",{parentName:"mrow"},"r")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"p\\rightarrow(q\\rightarrow r)\\vdash(p\\land q)\\rightarrow r")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.625em",verticalAlign:"-0.19444em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"p"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u2192"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mopen"}),"("),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.03588em"}}),"q"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u2192"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.02778em"}}),"r"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mclose"}),")"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u22a2"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mopen"}),"("),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"p"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"\u2227"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.03588em"}}),"q"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mclose"}),")"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u2192"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.02778em"}}),"r"))))),".")),Object(m.b)("li",{parentName:"ol"},Object(m.b)("p",{parentName:"li"},"We have observed that modus ponens, the ",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mo",{parentName:"mrow"},"\u2192")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"\\rightarrow")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.36687em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u2192")))))," elimination rule,\ncorresponds to function application. What operation on functions corresponds\nto the Law of Syllogism (",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow"},"\u2192"),Object(m.b)("mi",{parentName:"mrow"},"q"),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{separator:"true"}),","),Object(m.b)("mi",{parentName:"mrow"},"q"),Object(m.b)("mo",{parentName:"mrow"},"\u2192"),Object(m.b)("mi",{parentName:"mrow"},"r"),Object(m.b)("mo",{parentName:"mrow"},"\u22a2"),Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow"},"\u2192"),Object(m.b)("mi",{parentName:"mrow"},"r")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"p\\rightarrow q,q\\rightarrow r\\vdash p\\rightarrow r")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.625em",verticalAlign:"-0.19444em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"p"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u2192"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.625em",verticalAlign:"-0.19444em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.03588em"}}),"q"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mpunct"}),","),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.16666666666666666em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.03588em"}}),"q"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u2192"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.69444em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.02778em"}}),"r"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u22a2"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.625em",verticalAlign:"-0.19444em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"p"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u2192"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.02778em"}}),"r"))))),")?")),Object(m.b)("li",{parentName:"ol"},Object(m.b)("p",{parentName:"li"},"Prove the logical equivalence ",Object(m.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),"("),Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow"},"\u2228"),Object(m.b)("mi",{parentName:"mrow"},"q"),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),")"),Object(m.b)("mo",{parentName:"mrow"},"\u2192"),Object(m.b)("mi",{parentName:"mrow"},"r"),Object(m.b)("mo",{parentName:"mrow"},"\u2261"),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),"("),Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow"},"\u2192"),Object(m.b)("mi",{parentName:"mrow"},"r"),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),")"),Object(m.b)("mo",{parentName:"mrow"},"\u2227"),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),"("),Object(m.b)("mi",{parentName:"mrow"},"q"),Object(m.b)("mo",{parentName:"mrow"},"\u2192"),Object(m.b)("mi",{parentName:"mrow"},"r"),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),")")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"(p\\lor q)\\rightarrow r\\equiv(p\\rightarrow r)\\land(q\\rightarrow r)")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mopen"}),"("),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"p"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"\u2228"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.03588em"}}),"q"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mclose"}),")"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u2192"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.46375em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.02778em"}}),"r"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u2261"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mopen"}),"("),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"p"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u2192"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.02778em"}}),"r"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mclose"}),")"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"\u2227"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mopen"}),"("),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.03588em"}}),"q"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"\u2192"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.02778em"}}),"r"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mclose"}),")"))))),". Give the analogous ReasonML functions that show the\n1-1 correspondence between the types ",Object(m.b)("inlineCode",{parentName:"p"},"disj('a, 'b) => 'c")," and\n",Object(m.b)("inlineCode",{parentName:"p"},"('a => 'c, 'b => 'c)"),"."))),Object(m.b)("h2",{id:"todo"},"TODO"),Object(m.b)("p",null,"another page on common patterns of recursion: map, reduce, fold, accumulator,\nauxilliary function, tail-recursion, mutual recursion. A page on functional graphics.\nA summary page on ReasonML."),Object(m.b)("div",{className:"footnotes"},Object(m.b)("hr",{parentName:"div"}),Object(m.b)("ol",{parentName:"div"},Object(m.b)("li",Object(n.a)({parentName:"ol"},{id:"fn-1"}),"ReasonML, unlike many common languages,\ndistinguishes between the integer addition operator, written ",Object(m.b)("inlineCode",{parentName:"li"},"+"),", and the\nfloating-point addition operator, which is written ",Object(m.b)("inlineCode",{parentName:"li"},"+."),". In part this is done to\nmake type inference easier.",Object(m.b)("a",Object(n.a)({parentName:"li"},{href:"#fnref-1",className:"footnote-backref"}),"\u21a9")),Object(m.b)("li",Object(n.a)({parentName:"ol"},{id:"fn-2"}),'As\nis often the case when things are named, Curry did not originate this idea. He got it\nfrom Moses Sch\xf6nfinkel, who may have picked it up from Gottlob Frege, but "currying"\nis easier to say than "sch\xf6nfinkeling" or "fregeing"',"\u2026",".",Object(m.b)("a",Object(n.a)({parentName:"li"},{href:"#fnref-2",className:"footnote-backref"}),"\u21a9")),Object(m.b)("li",Object(n.a)({parentName:"ol"},{id:"fn-3"}),"Part of the reason for this is simply tradition, but another\nimportant factor is that ReasonML does not have an easy way to give a type for a\nfunction that would take an ",Object(m.b)("span",Object(n.a)({parentName:"li"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"n")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"n")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"n"))))),"-tuple plus an integer, say from 1 to ",Object(m.b)("span",Object(n.a)({parentName:"li"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"n")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"n")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"n"))))),", and\nreturn that component of the tuple; since each component may have a different\ntype, what would the return type of that accessor be?",Object(m.b)("a",Object(n.a)({parentName:"li"},{href:"#fnref-3",className:"footnote-backref"}),"\u21a9")),Object(m.b)("li",Object(n.a)({parentName:"ol"},{id:"fn-4"}),"ReasonML does not go\nquite all the way with making types be first-class values. There is currently\nactive work on creating industrial-strength languages with so-called ",Object(m.b)("strong",{parentName:"li"},"dependent\ntypes"),", where types are values and values can be used in types. Good examples are\nAgda (",Object(m.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/agda/agda"}),"https://github.com/agda/agda"),"), Idris (",Object(m.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.idris-lang.org/"}),"https://www.idris-lang.org/"),"), and Lean\n(",Object(m.b)("a",Object(n.a)({parentName:"li"},{href:"https://leanprover.github.io/"}),"https://leanprover.github.io/"),").",Object(m.b)("a",Object(n.a)({parentName:"li"},{href:"#fnref-4",className:"footnote-backref"}),"\u21a9")),Object(m.b)("li",Object(n.a)({parentName:"ol"},{id:"fn-5"}),"For\nexample, we could define ",Object(m.b)("span",Object(n.a)({parentName:"li"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"A"),Object(m.b)("mo",{parentName:"mrow"},"+"),Object(m.b)("mi",{parentName:"mrow"},"B"),Object(m.b)("mo",{parentName:"mrow"},"="),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),"("),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),"{"),Object(m.b)("mn",{parentName:"mrow"},"0"),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),"}"),Object(m.b)("mo",{parentName:"mrow"},"\xd7"),Object(m.b)("mi",{parentName:"mrow"},"A"),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),")"),Object(m.b)("mo",{parentName:"mrow"},"\u222a"),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),"("),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),"{"),Object(m.b)("mn",{parentName:"mrow"},"1"),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),"}"),Object(m.b)("mo",{parentName:"mrow"},"\xd7"),Object(m.b)("mi",{parentName:"mrow"},"B"),Object(m.b)("mo",Object(n.a)({parentName:"mrow"},{stretchy:"false"}),")")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"A+B=(\\{0\\}\\times A)\\cup(\\{1\\}\\times B)")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.76666em",verticalAlign:"-0.08333em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"A"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"+"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.05017em"}}),"B"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"="),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mopen"}),"("),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mopen"}),"{"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"0"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mclose"}),"}"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"\xd7"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"A"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mclose"}),")"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"\u222a"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mopen"}),"("),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mopen"}),"{"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"1"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mclose"}),"}"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"\xd7"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}}))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.05017em"}}),"B"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mclose"}),")"))))),". Then each element\nin the disjoint sum would be a pair whose first component is a tag of 0 if the element\ncame from ",Object(m.b)("span",Object(n.a)({parentName:"li"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"A")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"A")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"A")))))," and 1 if it came from ",Object(m.b)("span",Object(n.a)({parentName:"li"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"B")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"B")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.05017em"}}),"B"))))),". Any element in common between ",Object(m.b)("span",Object(n.a)({parentName:"li"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"A")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"A")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"A")))))," and ",Object(m.b)("span",Object(n.a)({parentName:"li"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"B")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"B")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.05017em"}}),"B")))))," will\nstill be distinguishable by its tag.",Object(m.b)("a",Object(n.a)({parentName:"li"},{href:"#fnref-5",className:"footnote-backref"}),"\u21a9")),Object(m.b)("li",Object(n.a)({parentName:"ol"},{id:"fn-6"}),"This now accounts for all\nof natural deduction except for the double-negation elimination rule, which\nwe already observed is difficult to justify from a computational viewpoint.\nIt would allow us to go from knowing that ",Object(m.b)("span",Object(n.a)({parentName:"li"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",Object(n.a)({parentName:"mrow"},{mathvariant:"normal"}),"\xac"),Object(m.b)("mi",{parentName:"mrow"},"A")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"\\lnot A")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"\xac"),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"A")))))," is not true to somehow\nhaving a proof that ",Object(m.b)("span",Object(n.a)({parentName:"li"},{className:"math math-inline"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(m.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"A")),Object(m.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"A")))),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(m.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"A")))))," is true, but there is a long distance from knowing that\na number is not prime, for example, to being able to show that it is composite by giving\nits factors","\u2014","much of modern cryptography relies on this distance!",Object(m.b)("a",Object(n.a)({parentName:"li"},{href:"#fnref-6",className:"footnote-backref"}),"\u21a9")))))}l.isMDXComponent=!0},182:function(e,a,t){"use strict";t.d(a,"a",(function(){return l})),t.d(a,"b",(function(){return o}));var n=t(0),s=t.n(n);function m(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function c(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function b(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?c(Object(t),!0).forEach((function(a){m(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,n,s=function(e,a){if(null==e)return{};var t,n,s={},m=Object.keys(e);for(n=0;n<m.length;n++)t=m[n],a.indexOf(t)>=0||(s[t]=e[t]);return s}(e,a);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(n=0;n<m.length;n++)t=m[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var r=s.a.createContext({}),i=function(e){var a=s.a.useContext(r),t=a;return e&&(t="function"==typeof e?e(a):b({},a,{},e)),t},l=function(e){var a=i(e.components);return s.a.createElement(r.Provider,{value:a},e.children)},j="mdxType",O={inlineCode:"code",wrapper:function(e){var a=e.children;return s.a.createElement(s.a.Fragment,{},a)}},N=Object(n.forwardRef)((function(e,a){var t=e.components,n=e.mdxType,m=e.originalType,c=e.parentName,r=p(e,["components","mdxType","originalType","parentName"]),l=i(t),j=n,N=l["".concat(c,".").concat(j)]||l[j]||O[j]||m;return t?s.a.createElement(N,b({ref:a},r,{components:t})):s.a.createElement(N,b({ref:a},r))}));function o(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var m=t.length,c=new Array(m);c[0]=N;var b={};for(var p in a)hasOwnProperty.call(a,p)&&(b[p]=a[p]);b.originalType=e,b[j]="string"==typeof e?e:n,c[1]=b;for(var r=2;r<m;r++)c[r]=t[r];return s.a.createElement.apply(null,c)}return s.a.createElement.apply(null,t)}N.displayName="MDXCreateElement"},183:function(e,a,t){"use strict";var n=t(0),s=t(35);a.a=function(){return Object(n.useContext)(s.a)}},184:function(e,a,t){"use strict";t.d(a,"a",(function(){return s}));var n=t(183);function s(e){const{siteConfig:a}=Object(n.a)(),{baseUrl:t="/"}=a||{};if(!e)return e;return/^(https?:|\/\/)/.test(e)?e:e.startsWith("/")?t+e.slice(1):t+e}}}]);