(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{121:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return i})),a.d(t,"default",(function(){return p}));var n=a(1),b=a(6),r=(a(0),a(186)),c={id:"doodle",title:"DPoodle Graphics"},l={id:"fp/doodle",title:"DPoodle Graphics",description:"```reason hidden",source:"@site/docs/fp/doodle.md",permalink:"/focsipedia/docs/fp/doodle",editUrl:"https://github.com/bhoward/focsipedia/edit/master/docs/fp/doodle.md",sidebar:"someSidebar",previous:{title:"Map and Reduce on Lists",permalink:"/focsipedia/docs/fp/map-reduce"},next:{title:"ReasonML",permalink:"/focsipedia/docs/reason"}},i=[{value:"Section 1. Introduction",id:"section-1-introduction",children:[]},{value:"Section 2. <code>image</code> type",id:"section-2-image-type",children:[]},{value:"Section 3. Position and Manipulation",id:"section-3-position-and-manipulation",children:[]},{value:"Section 4. Format",id:"section-4-format",children:[]},{value:"Section 5. Some applications",id:"section-5-some-applications",children:[]}],m={rightToc:i};function p(e){var t=e.components,a=Object(b.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},m,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"hidden",hidden:!0}),'let rec logoBackground = n => {\n  if (n == 0) {\n    Empty\n  } else {\n    let r = 10.0 *. sqrt(float_of_int(4 * n));\n    logoBackground(n - 1) +++\n      solid(hsl(float_of_int(12 * n), 1.0, 0.5), ellipse(2. *. r, r))\n  }\n};\nlet logo = withFont(2., Mono, Bold, Normal, stroke(Color("none"), fill(Color("black"), text("DPoodle")))) +++ logoBackground(50);\ndraw(logo)\n')),Object(r.b)("h2",{id:"section-1-introduction"},"Section 1. Introduction"),Object(r.b)("p",null,"DPoodle is a graphics library written in ReasonML at DePauw University during Spring 2020.\nDPoodle is based on the Doodle graphics library from ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://creativescala.com/"}),"Creative Scala"),"."),Object(r.b)("h2",{id:"section-2-image-type"},"Section 2. ",Object(r.b)("inlineCode",{parentName:"h2"},"image")," type"),Object(r.b)("p",null,"The basic type of a drawing in DPoodle is ",Object(r.b)("inlineCode",{parentName:"p"},"image"),".\nSeven built-in functions used to construct geometric shapes are ellipse, circle, rectangle, square, triangle, polygon, and regularPolygon.\nThe size arguments for all of these functions are of type ",Object(r.b)("inlineCode",{parentName:"p"},"float"),", plus the ",Object(r.b)("inlineCode",{parentName:"p"},"regularPolygon")," function also takes the number of sides as an ",Object(r.b)("inlineCode",{parentName:"p"},"int"),".\nEvery image in DPoodle has a ",Object(r.b)("em",{parentName:"p"},"bounding box"),", which is a minimal rectangle that can cover the image.\nThe center of the bounding box by default is at (0, 0).\nThe built-in triangle function creates an isoceles triangle with the base on the bottom edge of the bounding box and the vertex in the middle of the top edge. Detail about the built-in functions to create geometric shape images in DPoodle are in the following table:"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Function"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Argument(s)"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Bounding box size"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"ellipse(w, h)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Horizontal axis (w) and Vertical axis (h)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("span",Object(n.a)({parentName:"td"},{className:"math math-inline"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(r.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(r.b)("semantics",{parentName:"math"},Object(r.b)("mrow",{parentName:"semantics"},Object(r.b)("mi",{parentName:"mrow"},"w"),Object(r.b)("mo",{parentName:"mrow"},"\xd7"),Object(r.b)("mi",{parentName:"mrow"},"h")),Object(r.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"w\\times h")))),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.66666em",verticalAlign:"-0.08333em"}})),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.02691em"}}),"w"),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"\xd7"),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}}))),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.69444em",verticalAlign:"0em"}})),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"h"))))))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"circle(r)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Radius (r)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("span",Object(n.a)({parentName:"td"},{className:"math math-inline"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(r.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(r.b)("semantics",{parentName:"math"},Object(r.b)("mrow",{parentName:"semantics"},Object(r.b)("mn",{parentName:"mrow"},"2"),Object(r.b)("mi",{parentName:"mrow"},"r"),Object(r.b)("mo",{parentName:"mrow"},"\xd7"),Object(r.b)("mn",{parentName:"mrow"},"2"),Object(r.b)("mi",{parentName:"mrow"},"r")),Object(r.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"2r\\times 2r")))),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.72777em",verticalAlign:"-0.08333em"}})),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"2"),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.02778em"}}),"r"),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"\xd7"),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}}))),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}})),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"2"),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.02778em"}}),"r"))))))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"rectangle(w, h)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Width (w) and Height (h)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("span",Object(n.a)({parentName:"td"},{className:"math math-inline"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(r.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(r.b)("semantics",{parentName:"math"},Object(r.b)("mrow",{parentName:"semantics"},Object(r.b)("mi",{parentName:"mrow"},"w"),Object(r.b)("mo",{parentName:"mrow"},"\xd7"),Object(r.b)("mi",{parentName:"mrow"},"h")),Object(r.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"w\\times h")))),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.66666em",verticalAlign:"-0.08333em"}})),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.02691em"}}),"w"),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"\xd7"),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}}))),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.69444em",verticalAlign:"0em"}})),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"h"))))))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"square(w)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Side length (w)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("span",Object(n.a)({parentName:"td"},{className:"math math-inline"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(r.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(r.b)("semantics",{parentName:"math"},Object(r.b)("mrow",{parentName:"semantics"},Object(r.b)("mi",{parentName:"mrow"},"w"),Object(r.b)("mo",{parentName:"mrow"},"\xd7"),Object(r.b)("mi",{parentName:"mrow"},"w")),Object(r.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"w\\times w")))),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.66666em",verticalAlign:"-0.08333em"}})),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.02691em"}}),"w"),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"\xd7"),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}}))),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.02691em"}}),"w"))))))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"triangle(w, h)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Base (w) and Height (h)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("span",Object(n.a)({parentName:"td"},{className:"math math-inline"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(r.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(r.b)("semantics",{parentName:"math"},Object(r.b)("mrow",{parentName:"semantics"},Object(r.b)("mi",{parentName:"mrow"},"w"),Object(r.b)("mo",{parentName:"mrow"},"\xd7"),Object(r.b)("mi",{parentName:"mrow"},"h")),Object(r.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"w\\times h")))),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.66666em",verticalAlign:"-0.08333em"}})),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault",style:{marginRight:"0.02691em"}}),"w"),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"\xd7"),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}}))),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.69444em",verticalAlign:"0em"}})),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"h"))))))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"polygon(points)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"List of vertex points"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Smallest rectangle containing all points")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"regularPolygon(n, s, a)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Number of sides (n), Distance from center to vertex (s), and Initial angle (a)"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("span",Object(n.a)({parentName:"td"},{className:"math math-inline"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(r.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(r.b)("semantics",{parentName:"math"},Object(r.b)("mrow",{parentName:"semantics"},Object(r.b)("mn",{parentName:"mrow"},"2"),Object(r.b)("mi",{parentName:"mrow"},"s"),Object(r.b)("mo",{parentName:"mrow"},"\xd7"),Object(r.b)("mn",{parentName:"mrow"},"2"),Object(r.b)("mi",{parentName:"mrow"},"s")),Object(r.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"2s\\times 2s")))),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.72777em",verticalAlign:"-0.08333em"}})),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"2"),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"s"),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mbin"}),"\xd7"),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2222222222222222em"}}))),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}})),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"2"),Object(r.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathdefault"}),"s")))))," (roughly)")))),Object(r.b)("p",null,"Function ",Object(r.b)("inlineCode",{parentName:"p"},"draw(image)")," is used to visualize the ",Object(r.b)("inlineCode",{parentName:"p"},"image"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"draw(ellipse(20.0, 15.0))\ndraw(square(15.0))\ndraw(triangle(15.0, 20.0))\ndraw(polygon([(-10.0, 10.0), (0.0, -10.0), (10.0, -10.0), (15.0, 0.0)]))\ndraw(regularPolygon(6, 15., 90.))\n")),Object(r.b)("p",null,"In the library there is also a function call ",Object(r.b)("inlineCode",{parentName:"p"},"polyline")," which is closely related to to ",Object(r.b)("inlineCode",{parentName:"p"},"polygon"),". A polyline is a non-closed polygon: "),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"draw(polyline([(-10.0, 10.0), (0.0, -10.0), (10.0, -10.0), (15.0, 0.0)]))\n")),Object(r.b)("p",null,"Information about bounding box ",Object(r.b)("inlineCode",{parentName:"p"},"bbox")," of an ",Object(r.b)("inlineCode",{parentName:"p"},"image")," can be retrieved by following functions, which take an ",Object(r.b)("inlineCode",{parentName:"p"},"image")," as input. The first 4 functions return a ",Object(r.b)("inlineCode",{parentName:"p"},"float")," and the rest return a ",Object(r.b)("inlineCode",{parentName:"p"},"point"),", which is equivalent to a pair of floats."),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Function"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Return"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"left(image)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Minimum x-coordinate of corresponding ",Object(r.b)("inlineCode",{parentName:"td"},"bbox"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"right(image)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Maximum x-coordinate of corresponding ",Object(r.b)("inlineCode",{parentName:"td"},"bbox"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"top(image)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Minium y-coordinate of corresponding ",Object(r.b)("inlineCode",{parentName:"td"},"bbox"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"bottom(image)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Maximum y-coordinate of corresponding ",Object(r.b)("inlineCode",{parentName:"td"},"bbox"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"topLeft(image)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Top left coordinate of corresponding ",Object(r.b)("inlineCode",{parentName:"td"},"bbox"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"topRight(image)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Top right coordinate of corresponding ",Object(r.b)("inlineCode",{parentName:"td"},"bbox"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"bottomLeft(image)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Bottom left coordinate of corresponding ",Object(r.b)("inlineCode",{parentName:"td"},"bbox"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"bottomRight(image)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Bottom right coordinate of corresponding ",Object(r.b)("inlineCode",{parentName:"td"},"bbox"))))),Object(r.b)("p",null,"Here are some examples: "),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let a = rectangle(15., 20.)\nleft(a)\nright(a)\ntop(a)\nbottom(a)\ntopLeft(a)\ntopRight(a)\nbottomLeft(a)\nbottomRight(a)\n")),Object(r.b)("p",null,"We can also visuallize the bouding box and its center using ",Object(r.b)("inlineCode",{parentName:"p"},"showBounds")," function, which takes image as input: "),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let a = circle(30.)\ndraw(showBounds(a))\n")),Object(r.b)("p",null,"We can also construct a shape by specifying a colection of points and the connection between these points (using straight line or curve).\nThese shapes can be:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Open-path: using ",Object(r.b)("inlineCode",{parentName:"li"},"openPath(pathElements)")," function."),Object(r.b)("li",{parentName:"ul"},"Close-path: using ",Object(r.b)("inlineCode",{parentName:"li"},"closedPath(pathElements)")," function. ")),Object(r.b)("p",null,"These two functions take a list of ",Object(r.b)("inlineCode",{parentName:"p"},"pathElement")," values as input. The ",Object(r.b)("inlineCode",{parentName:"p"},"pathElement")," type can be"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"MoveTo(point)")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"LineTo(point)")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"CurveTo(point, point, point)"),"\nwhere point is a pair of floats.")),Object(r.b)("p",null,"In the following example, we draw an AND gate using ",Object(r.b)("inlineCode",{parentName:"p"},"closedPath")," function, on top of input and output wires drawn with ",Object(r.b)("inlineCode",{parentName:"p"},"openPath"),": "),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let andGate = ClosedPath([\n  MoveTo((-5., -10.)),\n  LineTo((0., -10.)),\n  CurveTo((5., -10.), (10., -5.), (10., 0.)),\n  CurveTo((10., 5.), (5., 10.), (0., 10.)),\n  LineTo((-5., 10.))\n]) +++ OpenPath([\n  MoveTo((-5., -5.)), LineTo((-15., -5.)),\n  MoveTo((-5., 5.)), LineTo((-15., 5.)),\n  MoveTo((10., 0.)), LineTo((20., 0.))\n]);\ndraw(andGate);\n")),Object(r.b)("p",null,"Here are corresponding definitions of OR and NOT gates. Note how the NOT gate is built from other primitive geometric shapes:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let orGate = ClosedPath([\n  MoveTo((-5., -10.)),\n  LineTo((0., -10.)),\n  CurveTo((5., -10.), (8., -5.), (10., 0.)),\n  CurveTo((8., 5.), (5., 10.), (0., 10.)),\n  LineTo((-5., 10.)),\n  CurveTo((0., 5.), (0., -5.), (-5., -10.))\n]) +++ OpenPath([\n  MoveTo((0., -5.)), LineTo((-15., -5.)),\n  MoveTo((0., 5.)), LineTo((-15., 5.)),\n  MoveTo((10., 0.)), LineTo((20., 0.))\n]);\ndraw(orGate);\n\nlet notGate = translate(4., 0., (rotate(90., triangle(20., 14.)) ||| circle(2.)))\n  +++ OpenPath([\n  MoveTo((-5., 0.)), LineTo((-15., 0.)),\n  MoveTo((13., 0.)), LineTo((20., 0.))\n]);\ndraw(notGate);\n")),Object(r.b)("h2",{id:"section-3-position-and-manipulation"},"Section 3. Position and Manipulation"),Object(r.b)("p",null,"We can control the relative position of 2 images using the following functions: "),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Function"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Return"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Alternative operation"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"beside(a, b)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Image a is on the left of image b. The centers of a and b are aligned"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("code",null,"a ","|","|","|"," b"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"above (a, b)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Image a is vertically above image b. The centers of a and b are aligned"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"a --- b"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"on(a, b)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Image a on top of image b. The centers of a and b are superimposed"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"a +++ b"))))),Object(r.b)("p",null,"The operator symbols should remind you of how a and b are arranged; imagine either drawing a line between them (",Object(r.b)("inlineCode",{parentName:"p"},"|")," or ",Object(r.b)("inlineCode",{parentName:"p"},"-"),") or centering one on the other (",Object(r.b)("inlineCode",{parentName:"p"},"+"),")."),Object(r.b)("p",null,"We can also scale, rotate, and translate the image: "),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Function"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Arguments"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Effect"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"rotate(a, img)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Angle a (degrees) and image img"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Rotate img by angle a clockwise.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"translate(dx, dy, img)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Changes in x- and y-coordinates dx and dy, image img"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Translate the points of img from (x, y) to (x + dx, y + dy).")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"translateP(p, img)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Point p and image img"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Translate the origin of img to point p.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"scalexy(sx, sy, img)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Horizontal and vertical scale factors sx and sy, image img"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Scale image horizontally by sx and vertically by sy.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"scale(s, img)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Scale factor s and image img"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Scale img in both directions by factor s.")))),Object(r.b)("p",null,"For example: "),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),"let a = circle(10.);\ndraw(translate(0., 10., a) ||| a);\ndraw(scale(5., a));\n")),Object(r.b)("h2",{id:"section-4-format"},"Section 4. Format"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"image")," type can be formatted using the ",Object(r.b)("inlineCode",{parentName:"p"},"Styled")," constructor.\nIn addition to an image ",Object(r.b)("inlineCode",{parentName:"p"},"img"),", the ",Object(r.b)("inlineCode",{parentName:"p"},"Styled")," function take a list as its argument.\nElements of this list can be these following values: "),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"th"},"Styled")," list element"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Argument"),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"center"}),"Effect"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"LineWidth(float)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"A float"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Use the specified border thickness.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"LineColor(color)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"A ",Object(r.b)("inlineCode",{parentName:"td"},"color")," type"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Use the specified border color.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"FillColor(color)")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"A ",Object(r.b)("inlineCode",{parentName:"td"},"color")," type"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Use the specified fill color.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),Object(r.b)("inlineCode",{parentName:"td"},"Dashed")),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"None"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"center"}),"Draw the border with dashed lines.")))),Object(r.b)("p",null,"The type ",Object(r.b)("inlineCode",{parentName:"p"},"color")," can be generated by one of the following constructors: "),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Color(string)"),": Takes a named CSS Level 4 color (see list below) as its argument. "),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"RGBA(int, int, int, float)"),": Create a color with the given red, green, and blue components. The first 3 arguments should be ints between 0 and 255. The fourth argument is the ",Object(r.b)("inlineCode",{parentName:"li"},"alpha")," level, which determines the opacity of the color; it should be a float between 0 and 1. An alpha of 1.0 is fully opaque, while 0.0 is fully transparent."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"HSLA(angle, float, float, float)"),": Create a color with the given hue, saturation, and lightness components. The first argument (hue) should be a float from 0 to 360, representing an angle in the color wheel (0 is red, 120 is green, and 240 is blue). The second argument (saturation) should be a float from 0 to 1, measuring how pure the hue is (1 is fully pure, while 0 is a shade of gray). The third argument (lightness) should be a float from 0 to 1, measuring how close to white (1) or black (0) it is. For example, a fully pure blue is represented by (hue, saturation, lightness) numbers (240., 1., 0.5). The last argument is the alpha value, as in RGBA.")),Object(r.b)("p",null,"Here are the known named colors:"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"left"})),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"left"})),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"left"})),Object(r.b)("th",Object(n.a)({parentName:"tr"},{align:"left"})))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"transparent"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"aliceBlue"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"antiqueWhite"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"aqua")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"aquamarine"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"azure"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"beige"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"bisque")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"black"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"blanchedAlmond"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"blue"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"blueViolet")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"brown"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"burlyWood"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"cadetBlue"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"chartreuse")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"chocolate"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"coral"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"cornflowerBlue"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"cornSilk")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"cyan"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"darkBlue"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"darkCyan"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"darkGoldenrod")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"darkGray"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"darkGrey"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"darkGreen"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"darkKhaki")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"darkMagenta"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"darkOliveGreen"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"darkOrange"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"darkOrchid")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"darkRed"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"darkSalmon"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"darkSeaGreen"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"darkSlateBlue")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"darkSlateGray"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"darkSlateGrey"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"darkTurquoise"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"darkViolet")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"deepPink"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"deepSkyBlue"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"dimGray"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"dimGrey")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"dodgerBlue"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"fireBrick"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"floralWhite"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"forestGreen")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"fuchsia"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"gainsboro"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"ghostWhite"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"gold")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"goldenrod"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"gray"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"grey"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"green")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"greenYellow"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"honeydew"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"hotpink"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"indianRed")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"indigo"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"ivory"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"khaki"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"lavender")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"lavenderBlush"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"lawngreen"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"lemonChiffon"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"lightBlue")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"lightCoral"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"lightCyan"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"lightGoldenrodYellow"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"lightGray")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"lightGrey"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"lightGreen"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"lightPink"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"lightSalmon")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"lightSeaGreen"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"lightSkyBlue"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"lightSlateGray"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"lightSlateGrey")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"lightSteelBlue"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"lightYellow"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"lime"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"limeGreen")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"linen"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"magenta"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"maroon"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"mediumAquamarine")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"mediumBlue"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"mediumOrchid"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"mediumPurple"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"mediumSeaGreen")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"mediumSlateBlue"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"mediumSpringGreen"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"mediumTurquoise"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"mediumVioletRed")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"midnightBlue"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"mintCream"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"mistyRose"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"moccasin")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"navajoWhite"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"navy"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"oldLace"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"olive")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"oliveDrab"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"orange"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"orangeRed"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"orchid")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"paleGoldenrod"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"paleGreen"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"paleTurquoise"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"paleVioletRed")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"papayaWhip"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"peachPuff"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"peru"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"pink")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"plum"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"powderBlue"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"purple"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"rebeccaPurple")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"red"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"rosyBrown"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"royalBlue"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"saddleBrown")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"salmon"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"sandyBrown"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"seaGreen"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"seaShell")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"sienna"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"silver"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"skyBlue"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"slateBlue")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"slateGray"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"slateGrey"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"snow"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"springGreen")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"steelBlue"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"tan"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"teal"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"thistle")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"tomato"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"turquoise"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"violet"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"wheat")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"white"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"whiteSmoke"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"yellow"),Object(r.b)("td",Object(n.a)({parentName:"tr"},{align:"left"}),"yellowGreen")))),Object(r.b)("p",null,"Here are some examples: "),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'let blueFill = img => { Styled(img, [FillColor(Color("blue"))]) };\nlet wideLines = img => { Styled(img, [LineWidth(3.0)]) };\nlet redOutline = img => { Styled(img, [LineColor(Color("red"))]) };\nlet a = blueFill(Ellipse(60.0, 80.0));\nlet b = wideLines(Rectangle(50.0, 50.0));\nlet c = Ellipse(30.0, 30.0);\nlet d = Bounds(Text("Hello"), -24., 24., -7., 7.);\ndraw(On(Rotate(Scale(d, 5., 5.), 45.),\n        redOutline(Above(Beside(a, b), c))));\n')),Object(r.b)("h2",{id:"section-5-some-applications"},"Section 5. Some applications"),Object(r.b)("p",null,"Here is an arrow. The ",Object(r.b)("inlineCode",{parentName:"p"},"focus")," function moves the ",Object(r.b)("em",{parentName:"p"},"focus")," point of the image (the point used\nto line up images with ",Object(r.b)("inlineCode",{parentName:"p"},"On"),", ",Object(r.b)("inlineCode",{parentName:"p"},"Beside"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"Above"),").\nThe first argument of focus is a two-letter value; the first letter is (T)op, (M)iddle, or (B)ottom, and the second is (L)eft, (C)enter, or (R)ight.\nThe value ",Object(r.b)("inlineCode",{parentName:"p"},"ML")," says to move the focus to the middle of the left edge of the bounding box, which in this\ncase is the tail end of the arrow.\nWe can use the ",Object(r.b)("inlineCode",{parentName:"p"},"showBounds")," function to visualize the bounding box and focus point."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'let arrow = len => {\n  strokeWidth(2., focus(ML, OpenPath([\n    moveXY(0., 0.),\n    lineXY(len, 0.),\n    lineXY(len -. 5., 5.),\n    moveXY(len, 0.),\n    lineXY(len -. 5., -5.)])))\n};\n\ndraw(arrow(50.))\n\ndraw(showBounds(arrow(50.)))\n\ndraw(arrow(50.) +++ rotate(-90., arrow(30.)) +++ fill(Color("white"), circle(60.)))\n')),Object(r.b)("p",null,"Using the arrow, here is a function to visualize a linked list:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-reason",metastring:"edit",edit:!0}),'let listNode = n => {\n  let valueField = solid(Color("black"), text(string_of_int(n))) +++ square(20.);\n  let nextField = arrow(20.) +++ square(20.);\n  fill(Color("white"), valueField ||| nextField)\n};\n\nlet rec showList = nums => {\n  switch (nums) {\n  | [] => solid(Color("black"), circle(5.))\n  | [head, ...tail] => listNode(head) ||| showList(tail)\n  }\n};\n\ndraw(showList([1, 2, 3]));\ndraw(showList([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n')))}p.isMDXComponent=!0},186:function(e,t,a){"use strict";a.d(t,"a",(function(){return o})),a.d(t,"b",(function(){return s}));var n=a(0),b=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,b=function(e,t){if(null==e)return{};var a,n,b={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(b[a]=e[a]);return b}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(b[a]=e[a])}return b}var m=b.a.createContext({}),p=function(e){var t=b.a.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):l({},t,{},e)),a},o=function(e){var t=p(e.components);return b.a.createElement(m.Provider,{value:t},e.children)},O={inlineCode:"code",wrapper:function(e){var t=e.children;return b.a.createElement(b.a.Fragment,{},t)}},j=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,c=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),o=p(a),j=n,s=o["".concat(c,".").concat(j)]||o[j]||O[j]||r;return a?b.a.createElement(s,l({ref:t},m,{components:a})):b.a.createElement(s,l({ref:t},m))}));function s(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,c=new Array(r);c[0]=j;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:n,c[1]=l;for(var m=2;m<r;m++)c[m]=a[m];return b.a.createElement.apply(null,c)}return b.a.createElement.apply(null,a)}j.displayName="MDXCreateElement"}}]);