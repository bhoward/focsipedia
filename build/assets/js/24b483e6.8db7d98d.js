"use strict";(self.webpackChunkfocsipedia=self.webpackChunkfocsipedia||[]).push([[7045],{1271:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var t=o(4848),r=o(8453);const l={id:"doodle-project",title:"DPoodle Graphics Drawing Project"},a=void 0,i={id:"fp/doodle-project",title:"DPoodle Graphics Drawing Project",description:"For Monday, March 30, create a drawing using the DPoodle graphics library. You should feel free to be as creative as you like, the only requirement is that the drawing use recursion in an essential way.",source:"@site/focsipedia-docs/target/mdoc/fp/doodle-project.md",sourceDirName:"fp",slug:"/fp/doodle-project",permalink:"/focsipedia/docs/fp/doodle-project",draft:!1,unlisted:!1,editUrl:"https://github.com/bhoward/focsipedia/tree/master/focsipedia-docs/target/mdoc/fp/doodle-project.md",tags:[],version:"current",frontMatter:{id:"doodle-project",title:"DPoodle Graphics Drawing Project"}},s={},c=[];function d(e){const n={a:"a",code:"code",em:"em",hr:"hr",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["For Monday, March 30, create a drawing using the ",(0,t.jsx)(n.a,{href:"/focsipedia/docs/fp/doodle",children:"DPoodle"})," graphics library. You should feel free to be as creative as you like, the only requirement is that the drawing use recursion in an essential way."]}),"\n",(0,t.jsxs)(n.p,{children:["Here is an editor where you can enter your code. ",(0,t.jsx)(n.em,{children:"Be sure to copy and paste it somewhere else"})," because this editor will be cleared when the page reloads. I suggest keeping a copy in a text editor such as WordPad or TextEdit. When you are done, upload it to Moodle: ",(0,t.jsx)(n.a,{href:"https://moodle.depauw.edu/mod/assign/view.php?id=243021",children:"Section A"})," or ",(0,t.jsx)(n.a,{href:"https://moodle.depauw.edu/mod/assign/view.php?id=243023",children:"Section B"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-reason",metastring:"edit",children:"/*\n * your code here\n */\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"Here are some examples to give you ideas:"}),"\n",(0,t.jsx)(n.p,{children:"Bralin Coleman, Fall 2019:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-reason",metastring:"edit",children:"let col = count => {\n  switch (count) {\n  | 0 => empty\n  | k => fill(hsl(float_of_int(k), 1.0, 0.5), rectangle(10., 10.))\n  }\n};\n\nlet rec box = count => {\n  switch (count) {\n  | 0 => empty\n  | n => col(n) ||| box(n - 5)\n  }\n};\n\nlet rec row = count => {\n  switch (count) {\n  | 0 => empty\n  | n => row(n - 10) --- (col(n) ||| box(n - 5))\n  }\n};\n\nlet rec rowR = count => {\n  switch (count) {\n  | 0 => empty\n  | n => (col(n) ||| box(n - 5)) --- rowR(n - 10)\n  }\n};\n\nlet diamond = count => {\n  switch (count) {\n  | 0 => empty\n  | n => row(n) --- rowR(n)\n  }\n};\n\ndraw(diamond(200));\n"})}),"\n",(0,t.jsx)(n.p,{children:"Kien Ta, Fall 2019:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-reason",metastring:"edit",children:"let sample = (start, radius, samples) => {\n  let step = 10.;\n  let dot = triangle(10., 10.);\n  let rec loop = count => {\n    let angle = radians(step *. float_of_int(count));\n    let r = radius /. float_of_int(samples) *. float_of_int(count); \n    switch (count) {\n    | 0 => empty\n    | n => fill(hsl(float_of_int(240 + count * 50), 1., 0.5),\n        translate(r *. cos(angle), r *. sin(angle), dot)) +++ loop(n - 1)\n    }\n  };\n\n  loop(samples)\n};\ndraw(sample(0., 250., 200));\n"})}),"\n",(0,t.jsx)(n.p,{children:"Michael Lackey, Fall 2019:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-reason",metastring:"edit",children:'let sky = solid(Color("skyblue"), rectangle(400., 200.));\nlet ground = solid(Color("green"), rectangle(400., 100.));\nlet roof = solid(Color("red"), triangle(50., 50.));\nlet frontDoor = solid(Color("blue"), rectangle(50., 15.)) ---\n  (solid(Color("black"), rectangle(10., 25.)) +++\n    solid(Color("blue"), rectangle(50., 25.)));\nlet house = roof --- frontDoor;\n\nlet rec town = count => {\n  switch (count) {\n  | 0 => empty\n  | n => house ||| town(n - 1)\n  }\n};\n\nlet townPlace = town(5);\ndraw(translate(0., 40., townPlace) +++ translate(0., 100., ground) +++ sky);\n'})}),"\n",(0,t.jsx)(n.p,{children:"Abby Hutson-Comeaux, Fall 2019:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-reason",metastring:"edit",children:'/* Establishing colors for the honeycomb & bee */\nlet orangeYellow = rgb(255, 215, 0);\nlet yellow = rgb(255, 255, 0);\nlet black = rgb(0, 0, 0);\nlet white = rgb(255, 255, 255);\n\n/* Creating a plain yellow background */\nlet background = solid(yellow, rectangle(400., 300.));\n\n/* oneComb generates each individual honey comb piece */\nlet oneComb = strokeWidth(3., stroke(yellow, fill(orangeYellow, regularPolygon(6, 15., 90.))));\n\n/* Method to create each row with the desired number of combs per row */\nlet rec combsPerRow = num => {\n  switch (num) { \n  | 1 => oneComb\n  | num => oneComb ||| combsPerRow(num - 1)\n  }\n};\n\n/* Method to actually create the honey comb that will be placed over the background */\nlet rec honeyComb = rows => {\n  switch (rows) {\n  | 0 => empty \n  | rows => combsPerRow(16) --- honeyComb(rows - 1)\n  }\n};\n\n/* Making the bottom piece to the bee, including the lines */\nlet beeButt = fill(yellow, openPath([\n  moveXY(-30., 0.), curveXY(-30., 0., 0., -35., 30., 0.),\n  moveXY(-30., 0.), curveXY(-30., 0., 0., 35., 30., 0.),\n  /* add lines for the bees body */\n  moveXY(-15., -12.), lineXY(-15., 12.),\n  moveXY(-5., -16.), lineXY(-5., 16.),\n  moveXY(5., -16.), lineXY(5., 16.),\n  moveXY(15., -12.), lineXY(15., 12.)\n]));\n\n/* Adding the wing to the bottom of the bee */\nlet bottomWing = openPath([\n  moveXY(0., 17.), lineXY(0., 35.),\n]) +++ fill(white, closedPath([\n  moveXY(0., 10.), curveXY(0., 10., -15., 30., 0., 40.),\n  curveXY(15., 30., 0., 10., 0., 10.)\n]));\n\n/* Adding the wing to the top of the bee */\nlet topWing = openPath([\n  moveXY(0., -17.), lineXY(0., -35.),\n]) +++ fill(white, closedPath([\n  moveXY(0., -10.), curveXY(0., -10., -15., -30., 0., -40.),\n  curveXY(15., -30., 0., -10., 0., -10.)\n]));\n\nlet beeBody = fill(black, circle(11.));\nlet beeHead = fill(yellow, circle(7.));\n\n/* Combining the parts of the bee */\nlet bee = beeBody +++ translate(12., 0., beeHead) +++ translate(-25., 0., beeButt);\nlet finalBee = bee +++ bottomWing +++ topWing;\n\nlet words = fill(black, withFont(3.0, Serif, Regular, Normal, text("~Bee Happy~")));\n\n/* Joining the text, honey comb, and bee all together */\nlet finalHoneyComb = words +++ translate(0., 10., honeyComb(10) +++ background);\n\n/* Add bees to the drawing */\nlet oneBee = rotate(320., finalBee) +++ translate(120., 55., finalHoneyComb);\nlet twoBee = rotate(140., finalBee) +++ translate(-230., -120., oneBee);\n\ndraw(twoBee);\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>i});var t=o(6540);const r={},l=t.createContext(r);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);