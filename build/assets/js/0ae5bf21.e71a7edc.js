"use strict";(self.webpackChunkfocsipedia=self.webpackChunkfocsipedia||[]).push([[4327],{2957:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>o});var a=s(4848),t=s(8453);const r={id:"regexpapp",title:"Applications of Regular Expressions"},i=void 0,c={id:"lang/regexpapp",title:"Applications of Regular Expressions",description:"(Content adapted from Critchlow &amp; Eck)",source:"@site/focsipedia-docs/target/mdoc/lang/regexpapp.md",sourceDirName:"lang",slug:"/lang/regexpapp",permalink:"/focsipedia/docs/lang/regexpapp",draft:!1,unlisted:!1,editUrl:"https://github.com/bhoward/focsipedia/tree/master/focsipedia-docs/target/mdoc/lang/regexpapp.md",tags:[],version:"current",frontMatter:{id:"regexpapp",title:"Applications of Regular Expressions"},sidebar:"mySidebar",previous:{title:"Regular Expressions",permalink:"/focsipedia/docs/lang/regexp"},next:{title:"Finite-State Automata",permalink:"/focsipedia/docs/lang/fsa"}},l={},o=[{value:"Exercises",id:"exercises",level:2}];function h(e){const n={a:"a",annotation:"annotation",code:"code",em:"em",h2:"h2",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",msup:"msup",mtext:"mtext",ol:"ol",p:"p",section:"section",semantics:"semantics",span:"span",strong:"strong",sup:"sup",ul:"ul",...(0,t.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"(Content adapted from Critchlow & Eck)"}),"\n",(0,a.jsxs)(n.p,{children:['A common operation when editing text is to search for a\ngiven string of characters, sometimes with the purpose of\nreplacing it with another string.  Many "search and replace" facilities have the option of using regular expressions\ninstead of simple strings of characters.  A regular expression describes\na language, that is, a ',(0,a.jsx)(n.em,{children:"set"})," of strings.  We can think of a regular\nexpression as a ",(0,a.jsx)(n.strong,{children:"pattern"})," that matches certain strings, namely all\nthe strings in the language described by the regular expression.\nWhen a regular expression is used in a search operation, the\ngoal is to find a string that matches the expression.  This type\nof ",(0,a.jsx)(n.strong,{children:"pattern matching"})," is very useful."]}),"\n",(0,a.jsxs)(n.p,{children:["The ability to do pattern matching with regular expressions is provided\nin many text editors, including ",(0,a.jsx)(n.em,{children:"jedit"})," and ",(0,a.jsx)(n.em,{children:"kwrite"}),".\nProgramming languages often come with libraries for working with\nregular expressions.  Java (as of version 1.4) provides regular\nexpression handling though a package named ",(0,a.jsx)(n.code,{children:"java.util.regexp"}),".\nC++ typically provides a header file named ",(0,a.jsx)(n.code,{children:"regexp.h"})," for\nthe same purpose.  In all these applications, many new notations are added to the syntax to make it\nmore convenient to use.  The syntax can vary from one implementation\nto another, but most implementations include the capabilities\ndiscussed in this section."]}),"\n",(0,a.jsxs)(n.p,{children:["In applications of regular expressions, the alphabet usually includes\nall the characters on the keyboard.  This leads to a problem, because\nregular expressions actually use two types of symbols:  symbols that\nare members of the alphabet and special symbols such as ",(0,a.jsx)(n.code,{children:"*"})," and ",(0,a.jsx)(n.code,{children:")"})," that\nare used to construct expressions.  These special symbols, which\nare not part of the language being described but are used in the\ndescription, are called ",(0,a.jsx)(n.strong,{children:"meta-characters"}),".  The problem is,\nwhen the alphabet includes all the available characters, what do we\ndo about meta-characters?  If the language that we are describing\nuses the ",(0,a.jsx)(n.code,{children:"*"})," character, for example, how can we represent the\nKleene star operation?"]}),"\n",(0,a.jsxs)(n.p,{children:['The solution is to use a so-called "escape character," which is\nusually the backslash, ',(0,a.jsx)(n.code,{children:"\\"}),".  We agree, for example, that the notation\n",(0,a.jsx)(n.code,{children:"\\*"})," refers to the symbol ",(0,a.jsx)(n.code,{children:"*"})," that is a member of\nthe alphabet, while ",(0,a.jsx)(n.code,{children:"*"})," by itself is the meta-character\nthat represents the Kleene star operation.  Similarly,\n",(0,a.jsx)(n.code,{children:"("})," and ",(0,a.jsx)(n.code,{children:")"})," are the meta-characters that are used\nfor grouping, while the corresponding characters in the language\nare written as ",(0,a.jsx)(n.code,{children:"\\("})," and ",(0,a.jsx)(n.code,{children:"\\)"}),".  For example,\na regular expression that matches the string ",(0,a.jsx)(n.code,{children:"a*b"})," repeated\nany number of times would be written: ",(0,a.jsx)(n.code,{children:"(a\\*b)*"}),".\nThe backslash is also used to represent certain non-printing\ncharacters.  For example, a tab is represented as ",(0,a.jsx)(n.code,{children:"\\t"}),"\nand a new line character is ",(0,a.jsx)(n.code,{children:"\\n"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["We introduce two new common operations on regular expressions and two\nnew meta-characters to represent them.\nThe first operation is represented by the meta-character ",(0,a.jsx)(n.code,{children:"+"}),":\nIf ",(0,a.jsx)(n.code,{children:"r"})," is a regular expression, then ",(0,a.jsx)(n.code,{children:"r+"})," represents the\noccurrence of ",(0,a.jsx)(n.code,{children:"r"})," one or more times.  The second operation\nis represented by ",(0,a.jsx)(n.code,{children:"?"}),": The notation ",(0,a.jsx)(n.code,{children:"r?"})," represents an occurrence of ",(0,a.jsx)(n.code,{children:"r"}),"\nzero or one times.  That is to say, ",(0,a.jsx)(n.code,{children:"r?"})," represents an optional\noccurrence of ",(0,a.jsx)(n.code,{children:"r"}),".  Note that these operations are introduced\nfor convenience only and do not represent any real increase\nin the power.  In fact, ",(0,a.jsx)(n.code,{children:"r+"})," is exactly equivalent to\n",(0,a.jsx)(n.code,{children:"rr*"}),", and ",(0,a.jsx)(n.code,{children:"r?"})," is equivalent to ",(0,a.jsx)(n.code,{children:"(r|\u03b5)"}),"\n(except that in applications there is generally no equivalent to ",(0,a.jsx)(n.code,{children:"\u03b5"}),")."]}),"\n",(0,a.jsxs)(n.p,{children:["To make it easier to deal with the large number of characters in the\nalphabet, ",(0,a.jsx)(n.strong,{children:"character classes"})," are introduced.  A character class\nconsists of a list of characters enclosed between brackets, ",(0,a.jsx)(n.code,{children:"["})," and\n",(0,a.jsx)(n.code,{children:"]"}),".  (The brackets are meta-characters.)  A character class\nmatches a single character, which can be any of the characters in\nthe list.  For example, ",(0,a.jsx)(n.code,{children:"[0123456789]"})," matches any one of\nthe digits 0 through 9.  The same thing could be expressed\nas ",(0,a.jsx)(n.code,{children:"(0|1|2|3|4|5|6|7|8|9)"}),", so once again\nwe have added only convenience, not new representational power.\nFor even more convenience, a hyphen can be included in a character\nclass to indicate a range of characters.  This means that\n",(0,a.jsx)(n.code,{children:"[0123456789]"})," could also be written as ",(0,a.jsx)(n.code,{children:"[0-9]"}),"\nand that the regular expression ",(0,a.jsx)(n.code,{children:"[a-z]"})," will match any\nsingle lowercase letter.  A character class can include multiple\nranges, so that ",(0,a.jsx)(n.code,{children:"[a-zA-Z]"})," will match any letter, lower- or\nuppercase.  The period (",(0,a.jsx)(n.code,{children:"."}),") is a meta-character that will\nmatch any single character, except (in most implementations)\nfor an end-of-line.\nThese notations can, of course, be used in more complex\nregular expressions.  For example, ",(0,a.jsx)(n.code,{children:"[A-Z][a-zA-Z]*"}),"\nwill match any capitalized word, and ",(0,a.jsx)(n.code,{children:"\\(.*\\)"})," matches\nany string of characters enclosed in parentheses."]}),"\n",(0,a.jsxs)(n.p,{children:["In most implementations, the meta-character ",(0,a.jsx)(n.code,{children:"^"})," can be used in\na regular expression to match the beginning of a line of text, so that\nthe expression ",(0,a.jsx)(n.code,{children:"^[a-zA-Z]+"})," will only match a word that\noccurs at the start of a line.  Similarly, ",(0,a.jsx)(n.code,{children:"$"})," is used\nas a meta-character to match the end of a line.  Some implementations\nalso have a way of matching beginnings and ends of words.\nTypically, ",(0,a.jsx)(n.code,{children:"\\b"}),' will match such "word boundaries."\nUsing this notation,\nthe pattern ',(0,a.jsx)(n.code,{children:"\\band\\b"}),' will match the string "and"\nwhen it occurs as a word, but will not match the a-n-d\nin the word "random."  We are going a bit beyond\nbasic regular expressions here: Previously, we only thought of\na regular expression as something that either will match\nor will not match a given string in its entirety.   When\nwe use a regular expression for a search operation, however,\nwe want to find a ',(0,a.jsx)(n.em,{children:"substring"})," of a given string that\nmatches the expression.  The notations ",(0,a.jsx)(n.code,{children:"^"}),",\n",(0,a.jsx)(n.code,{children:"$"})," and ",(0,a.jsx)(n.code,{children:"\\b"})," put restrictions\non ",(0,a.jsx)(n.em,{children:"where"})," the matching substring can be located in the string."]}),"\n",(0,a.jsxs)(n.p,{children:["When regular expressions are used in search-and-replace operations,\na regular expression is used for the search pattern.  A search is\nmade in a (typically long) string for a substring that matches the pattern,\nand then the substring is replaced by a specified replacement\npattern.  The replacement pattern is not used for matching\nand is not a regular expression.  However, it can be more than\njust a simple string.  It's possible to include parts of the\nsubstring that is being replaced in the replacement string.\nThe notations ",(0,a.jsx)(n.code,{children:"\\0"}),", ",(0,a.jsx)(n.code,{children:"\\1"}),", \u2026, ",(0,a.jsx)(n.code,{children:"\\9"}),"\nare used for this purpose.  The first of these, ",(0,a.jsx)(n.code,{children:"\\0"}),",\nstands for the entire substring that is being replaced.\nThe others are only available when parentheses are used in\nthe search pattern.  The notation ",(0,a.jsx)(n.code,{children:"\\1"}),' stands for\n"the part of the substring that matched the part of the\nsearch pattern beginning with the first ',(0,a.jsx)(n.code,{children:"("})," in the\npattern and ending with the matching ",(0,a.jsx)(n.code,{children:")"}),'."  Similarly,\n',(0,a.jsx)(n.code,{children:"\\2"})," represents whatever matched the part of the\nsearch pattern between the second pair of parentheses, and so on."]}),"\n",(0,a.jsxs)(n.p,{children:["Suppose, for example, that you would like to search for\na name in the form ",(0,a.jsx)(n.em,{children:"last-name, first-name"})," and\nreplace it with the same name in the form ",(0,a.jsx)(n.em,{children:"first-name last-name"}),'.\nFor example, "Reeves, Keanu" should be converted to "Keanu Reeves".\nAssuming that names contain only letters,\nthis could be done using the search pattern ',(0,a.jsx)(n.code,{children:"([A-Za-z]+), ([A-Za-z]+)"}),"\nand the replacement pattern ",(0,a.jsx)(n.code,{children:"\\2 \\1"}),".  When the match is\nmade, the first ",(0,a.jsx)(n.code,{children:"([A-Za-z]+)"}),' will match "Reeves",',(0,a.jsx)(n.sup,{children:(0,a.jsx)(n.a,{href:"#user-content-fn-1",id:"user-content-fnref-1","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})}),"\nso that in the replacement pattern, ",(0,a.jsx)(n.code,{children:"\\1"}),' represents the\nsubstring "Reeves". Similarly, ',(0,a.jsx)(n.code,{children:"\\2"}),' will represent\n"Keanu".  Note that the parentheses\nare included in the search pattern ',(0,a.jsx)(n.em,{children:"only"})," to specify what parts\nof the string are represented by ",(0,a.jsx)(n.code,{children:"\\1"})," and ",(0,a.jsx)(n.code,{children:"\\2"}),".\nIn practice, you might use ",(0,a.jsx)(n.code,{children:"^([A-Za-z]+), ([A-Za-z])$"}),'\nas the search pattern to constrain it so that it will only\nmatch a complete line of text.  By using a "global" search-and-replace,\nyou could convert an entire file of names from one format to the other\nin a single operation.']}),"\n",(0,a.jsx)(n.p,{children:"Regular expressions are a powerful and useful technique that\nshould be part of any computer scientist's toolbox.  This section\nhas given you a taste of what they can do, but you should check\nout the specific capabilities of the regular expression implementation\nin the tools and programming languages that you use."}),"\n",(0,a.jsx)(n.h2,{id:"exercises",children:"Exercises"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"The backslash is itself a meta-character.  Suppose that\nyou want to match a string that contains a backslash\ncharacter.  How do you suppose you would represent the backslash in\nthe regular expression?"}),"\n"]}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Answer"}),(0,a.jsxs)(n.p,{children:["Escape it with a backslash: ",(0,a.jsx)(n.code,{children:"\\\\"}),"."]})]}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Using the notation introduced in this section,\nwrite a regular expression that could be used to match\neach of the following:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Any sequence of letters (upper- or lowercase) that includes the letter Z (in uppercase)."}),"\n"]}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Answer"}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"[A-Za-z]*Z[A-Za-z]*"})})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Any ten-digit telephone number written in the form ",(0,a.jsx)(n.code,{children:"(xxx)xxx-xxxx"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Answer"}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"\\([0-9][0-9][0-9]\\)[0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]"})})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Any ten-digit telephone number ",(0,a.jsx)(n.em,{children:"either"})," in the form ",(0,a.jsx)(n.code,{children:"(xxx)xxx-xxxx"})," or ",(0,a.jsx)(n.code,{children:"xxx-xxx-xxxx"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Answer"}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"(\\([0-9][0-9][0-9]\\)|[0-9][0-9][0-9]-)[0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]"})})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"A non-negative real number with an optional decimal part.  The expression should match numbers such as 17, 183.9999, 182., 0, 0.001, and 21333.2."}),"\n"]}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Answer"}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"[0-9]+(.[0-9]*)"})})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"A complete line of  text that contains only letters."}),"\n"]}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Answer"}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"^[A-Za-z]*$"})})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["A C++ style one-line comment consisting of ",(0,a.jsx)(n.code,{children:"//"})," and all the following characters up to the end-of-line."]}),"\n"]}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Answer"}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"//.*$"})})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Give a search pattern and a replace pattern that could\nbe used to perform the following conversions:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Convert a string that is enclosed in a pair of double quotes to the same string with the double quotes replaced by single quotes."}),"\n"]}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Answer"}),(0,a.jsxs)(n.p,{children:["Replace ",(0,a.jsx)(n.code,{children:'"(.*)"'})," with ",(0,a.jsx)(n.code,{children:"'\\1'"}),"."]})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Convert ten-digit telephone numbers in the format ",(0,a.jsx)(n.code,{children:"xxx-xxx-xxxx"})," to the format ",(0,a.jsx)(n.code,{children:"(xxx)xxx-xxxx"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Answer"}),(0,a.jsxs)(n.p,{children:["Replace ",(0,a.jsx)(n.code,{children:"([0-9][0-9][0-9])-([0-9][0-9][0-9]-[0-9][0-9][0-9][0-9])"})," with ",(0,a.jsx)(n.code,{children:"\\(\\1\\)\\2"}),"."]})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Convert C++ one-line comments, consisting of characters between ",(0,a.jsx)(n.code,{children:"//"})," and end-of-line, to C style comments enclosed between ",(0,a.jsx)(n.code,{children:"/*"})," and ",(0,a.jsx)(n.code,{children:"*/"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Answer"}),(0,a.jsxs)(n.p,{children:["Replace ",(0,a.jsx)(n.code,{children:"//(.*)$"})," with ",(0,a.jsx)(n.code,{children:"/\\*\\1/\\*"}),"."]})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Convert any number of consecutive spaces and tabs to a single space."}),"\n"]}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Answer"}),(0,a.jsxs)(n.p,{children:["Replace ",(0,a.jsx)(n.code,{children:"[ \\t]+"})," with ",(0,a.jsx)(n.code,{children:" "}),"."]})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:['In some implementations of "regular expressions," the\nnotations ',(0,a.jsx)(n.code,{children:"\\1"}),", ",(0,a.jsx)(n.code,{children:"\\2"}),", and so on can occur\nin a ",(0,a.jsx)(n.em,{children:"search"})," pattern.  For example, consider the search pattern\n",(0,a.jsx)(n.code,{children:"^([a-zA-Z]).*\\1$"}),".  Here, ",(0,a.jsx)(n.code,{children:"\\1"})," represents\na recurrence of the same substring that matched ",(0,a.jsx)(n.code,{children:"[a-zA-Z]"}),",\nthe part of the pattern between the first pair of parentheses.\nThe entire pattern, therefore, will match a line of text that\nbegins and ends with the same letter.  Using this notation,\nwrite a pattern that matches all strings in the language\n",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsxs)(n.mrow,{children:[(0,a.jsx)(n.mi,{children:"L"}),(0,a.jsx)(n.mo,{children:"="}),(0,a.jsx)(n.mo,{stretchy:"false",children:"{"}),(0,a.jsxs)(n.msup,{children:[(0,a.jsx)(n.mi,{children:"a"}),(0,a.jsx)(n.mi,{children:"n"})]}),(0,a.jsx)(n.mi,{children:"b"}),(0,a.jsxs)(n.msup,{children:[(0,a.jsx)(n.mi,{children:"a"}),(0,a.jsx)(n.mi,{children:"n"})]}),(0,a.jsx)(n.mtext,{children:"\u2009"}),(0,a.jsx)(n.mi,{mathvariant:"normal",children:"\u2223"}),(0,a.jsx)(n.mtext,{children:"\u2009"}),(0,a.jsx)(n.mi,{children:"n"}),(0,a.jsx)(n.mo,{children:"\u2265"}),(0,a.jsx)(n.mn,{children:"0"}),(0,a.jsx)(n.mo,{stretchy:"false",children:"}"})]}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"L=\\{a^nba^n\\,|\\,n\\ge0\\}"})]})})}),(0,a.jsxs)(n.span,{className:"katex-html","aria-hidden":"true",children:[(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.6833em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"L"}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,a.jsx)(n.span,{className:"mrel",children:"="}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(n.span,{className:"mopen",children:"{"}),(0,a.jsxs)(n.span,{className:"mord",children:[(0,a.jsx)(n.span,{className:"mord mathnormal",children:"a"}),(0,a.jsx)(n.span,{className:"msupsub",children:(0,a.jsx)(n.span,{className:"vlist-t",children:(0,a.jsx)(n.span,{className:"vlist-r",children:(0,a.jsx)(n.span,{className:"vlist",style:{height:"0.6644em"},children:(0,a.jsxs)(n.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,a.jsx)(n.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(n.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(n.span,{className:"mord mathnormal mtight",children:"n"})})]})})})})})]}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"b"}),(0,a.jsxs)(n.span,{className:"mord",children:[(0,a.jsx)(n.span,{className:"mord mathnormal",children:"a"}),(0,a.jsx)(n.span,{className:"msupsub",children:(0,a.jsx)(n.span,{className:"vlist-t",children:(0,a.jsx)(n.span,{className:"vlist-r",children:(0,a.jsx)(n.span,{className:"vlist",style:{height:"0.6644em"},children:(0,a.jsxs)(n.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,a.jsx)(n.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(n.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(n.span,{className:"mord mathnormal mtight",children:"n"})})]})})})})})]}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,a.jsx)(n.span,{className:"mord",children:"\u2223"}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,a.jsx)(n.span,{className:"mrel",children:"\u2265"}),(0,a.jsx)(n.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(n.span,{className:"mord",children:"0"}),(0,a.jsx)(n.span,{className:"mclose",children:"}"})]})]})]}),".  (Later in this chapter, we will\nsee that ",(0,a.jsxs)(n.span,{className:"katex",children:[(0,a.jsx)(n.span,{className:"katex-mathml",children:(0,a.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(n.semantics,{children:[(0,a.jsx)(n.mrow,{children:(0,a.jsx)(n.mi,{children:"L"})}),(0,a.jsx)(n.annotation,{encoding:"application/x-tex",children:"L"})]})})}),(0,a.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(n.span,{className:"base",children:[(0,a.jsx)(n.span,{className:"strut",style:{height:"0.6833em"}}),(0,a.jsx)(n.span,{className:"mord mathnormal",children:"L"})]})})]})," is ",(0,a.jsx)(n.em,{children:"not"})," a regular language, so allowing the\nuse of ",(0,a.jsx)(n.code,{children:"\\1"}),' in a "regular expression" means that it\'s\nnot really a regular expression at all!  This notation can add\na real increase in expressive power to the patterns that contain it.)']}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s,{children:[(0,a.jsx)("summary",{children:"Answer"}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"(a*)b\\1"})})]}),"\n","\n",(0,a.jsxs)(n.section,{"data-footnotes":!0,className:"footnotes",children:[(0,a.jsx)(n.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{id:"user-content-fn-1",children:["\n",(0,a.jsxs)(n.p,{children:["Anyone who tells you the comma always belongs inside the quotation marks has never\nhad to punctuate a sentence like this\u2026. ",(0,a.jsx)(n.a,{href:"#user-content-fnref-1","data-footnote-backref":"","aria-label":"Back to reference 1",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var a=s(6540);const t={},r=a.createContext(t);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);