"use strict";(self.webpackChunkfocsipedia=self.webpackChunkfocsipedia||[]).push([[2538],{4245:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>o});var a=n(4848),t=n(8453);const i={id:"map-reduce",title:"Map and Reduce on Lists"},l=void 0,r={id:"fp/map-reduce",title:"Map and Reduce on Lists",description:"Two of the most fundamental operations on lists are map and reduce.",source:"@site/focsipedia-docs/target/mdoc/fp/map-reduce.md",sourceDirName:"fp",slug:"/fp/map-reduce",permalink:"/focsipedia/docs/fp/map-reduce",draft:!1,unlisted:!1,editUrl:"https://github.com/bhoward/focsipedia/tree/master/focsipedia-docs/target/mdoc/fp/map-reduce.md",tags:[],version:"current",frontMatter:{id:"map-reduce",title:"Map and Reduce on Lists"},sidebar:"mySidebar",previous:{title:"Types in Functional Programming",permalink:"/focsipedia/docs/fp/types"},next:{title:"Doodle Graphics",permalink:"/focsipedia/docs/fp/doodle"}},c={},o=[{value:"Helper Functions",id:"helper-functions",level:2},{value:"Accumulators",id:"accumulators",level:2},{value:"Tail Recursion",id:"tail-recursion",level:2},{value:"Exercises",id:"exercises",level:2}];function h(e){const s={a:"a",annotation:"annotation",code:"code",em:"em",h2:"h2",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",msqrt:"msqrt",msub:"msub",msubsup:"msubsup",ol:"ol",p:"p",path:"path",pre:"pre",section:"section",semantics:"semantics",span:"span",strong:"strong",sup:"sup",svg:"svg",ul:"ul",...(0,t.R)(),...e.components},{Details:n}=s;return n||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(s.p,{children:["Two of the most fundamental operations on lists are ",(0,a.jsx)(s.code,{children:"map"})," and ",(0,a.jsx)(s.code,{children:"reduce"}),".\nIn an extended form,",(0,a.jsx)(s.sup,{children:(0,a.jsx)(s.a,{href:"#user-content-fn-1",id:"user-content-fnref-1","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})})," they are the basis of one of the big success stories of functional programming: Google's ",(0,a.jsx)(s.a,{href:"http://static.googleusercontent.com/media/research.google.com/es/us/archive/mapreduce-osdi04.pdf",children:"MapReduce"})," framework.\nThe idea is fairly simple: given a huge amount of data (say, the result of crawling the web) stored across a large distributed cluster of servers, many jobs can be broken into two steps:"]}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Map"}),": apply some function uniformly across all of the pieces of data, running in parallel on all of the machines in the cluster;"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Reduce"}),": collect up the results of the map phase into some sort of summary by applying a function that combines several results into one; this can first be done locally on each machine, and then spread to combine results from larger and larger groups of machines until the entire cluster has been summarized."]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:"For example, the map operation might extract keywords from web pages, while the reduce operation might produce a table counting the occurrences of each keyword.\nEngineers at Google recognized that many of their tasks fit this model, and they could save a huge amount of effort by writing a framework to do all of the distributed processing, with associated optimizations and error handling, just once; all that needed to be supplied for any given use of the framework was two (pure) functions: the function to be mapped and the function to perform the reduction."}),"\n",(0,a.jsxs)(s.p,{children:["Here is what the ",(0,a.jsx)(s.code,{children:"map"})," and ",(0,a.jsx)(s.code,{children:"reduce"}),(0,a.jsx)(s.sup,{children:(0,a.jsx)(s.a,{href:"#user-content-fn-2",id:"user-content-fnref-2","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"2"})})," operations look like on lists:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:"def map[A, B](f: A => B, data: List[A]): List[B] = {\n  data match\n    case Nil => Nil\n    case head :: tail => f(head) :: map(f, tail)\n}\n\ndef reduce[A, B](g: (B, A) => B, init: B, data: List[A]): B = {\n  data match\n    case Nil => init\n    case head :: tail => reduce(g, g(init, head), tail)\n}\n\nmap((n: Int) => 2 * n, List(1, 2, 3))\n// res0: List[Int] = List(2, 4, 6)\nreduce((a: Int, b: Int) => a + b, 0, List(1, 2, 3))\n// res1: Int = 6\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Given functions ",(0,a.jsx)(s.code,{children:"f"})," and ",(0,a.jsx)(s.code,{children:"g"})," and a list ",(0,a.jsx)(s.code,{children:"xs = List(x1, x2, ..., xn)"}),":"]}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["the action of ",(0,a.jsx)(s.code,{children:"map(f, xs)"})," is to produce ",(0,a.jsx)(s.code,{children:"List(f(x1), f(x2), ..., f(xn))"}),", and"]}),"\n",(0,a.jsxs)(s.li,{children:["the action of ",(0,a.jsx)(s.code,{children:"reduce(g, init, xs)"})," is to produce ",(0,a.jsx)(s.code,{children:"g(...g(g(init, x1), x2)..., xn)"}),".\nIf we think of ",(0,a.jsx)(s.code,{children:"g"})," as a binary operator, this is ",(0,a.jsx)(s.code,{children:"init g x1 g x2 ... g xn"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(s.p,{children:["The code shows two simple examples of using ",(0,a.jsx)(s.code,{children:"map"})," and ",(0,a.jsx)(s.code,{children:"reduce"}),".\nThe first maps the function ",(0,a.jsx)(s.code,{children:"n => 2 * n"})," over ",(0,a.jsx)(s.code,{children:"List(1, 2, 3)"}),", which returns a list where each element has been doubled.\nThe second reduces ",(0,a.jsx)(s.code,{children:"List(1, 2, 3)"})," by starting with an initial result of 0.\nThe reduction function is ",(0,a.jsx)(s.code,{children:"(a, b) => a + b"}),", which says to take the previous result (",(0,a.jsx)(s.code,{children:"a"}),") and add the next item from the list (",(0,a.jsx)(s.code,{children:"b"}),").\nAt the end of the reduction, the result is the sum of all the numbers in the list."]}),"\n",(0,a.jsx)(s.h2,{id:"helper-functions",children:"Helper Functions"}),"\n",(0,a.jsx)(s.p,{children:"Sometimes a direct recursive solution to a problem doesn't quite work.\nFor example, suppose we want to convert a list of words into a single string with commas between each word.\nIf we try to do this as a reduce operation, the result is close but not correct:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:'reduce((s: String, w: String) => s + ", " + w, "", List("hello", "world"))\n// res2: String = ", hello, world"\n'})}),"\n",(0,a.jsxs)(s.p,{children:["The problem is that the initial task is not quite the same as the smaller subtask that is left after we handle one element of the list.\nEvery word ",(0,a.jsx)(s.em,{children:"except"})," the first needs to be preceded by a comma.",(0,a.jsx)(s.sup,{children:(0,a.jsx)(s.a,{href:"#user-content-fn-3",id:"user-content-fnref-3","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"3"})}),"\nOne way to fix this is to split the task into an initial function that handles the special cases to get things going, plus a helper function (often called ",(0,a.jsx)(s.code,{children:"aux"}),' and defined locally in the body of the main function) that does the recursive work.\nHere is a solution to the "comma-separated string" problem using a helper function:']}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:'def stringOfList(words: List[String]): String = {\n  def aux(words: List[String]): String = {\n    words match\n      case Nil => ""\n      case head :: tail => ", " + head + aux(tail)\n  }\n\n  words match\n    case Nil => ""\n    case head :: tail => head + aux(tail)\n}\n\nstringOfList(List("hello", "world"))\n// res3: String = "hello, world"\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Note that the ",(0,a.jsx)(s.code,{children:"aux"})," function here could have just been an application of ",(0,a.jsx)(s.code,{children:"reduce"})," as initially tried above (because we actually ",(0,a.jsx)(s.em,{children:"do"})," want a comma in front of each word at this point), but we are writing it as its own function to show the pattern."]}),"\n",(0,a.jsx)(s.h2,{id:"accumulators",children:"Accumulators"}),"\n",(0,a.jsxs)(s.p,{children:["Helper functions are frequently seen in combination with another technique known as an ",(0,a.jsx)(s.strong,{children:"accumulator"}),".\nSince a pure functional program is not allowed to modify the values of variables as a computation proceeds, if we want to build up a result over a succession of function calls we can do so by passing along an extra variable containing the result so far. For example, here is another version of the ",(0,a.jsx)(s.code,{children:"sum"})," function from the ",(0,a.jsx)(s.a,{href:"/focsipedia/docs/fp/intro",children:"introduction"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:"def sum(f: Int => Int, a: Int, b: Int): Int = {\n  def aux(i: Int, accum: Int): Int = {\n    if i > b then accum\n    else aux(i + 1, accum + f(i))\n  }\n\n  aux(a, 0)\n}\n\nsum(i => i * i * i, 3, 5)\n// res4: Int = 216\n"})}),"\n",(0,a.jsx)(s.p,{children:"When the recursion terminates, it is common to just return the value of the accumulator (or to compute a result based on its final value).\nEach time the recursion continues, the extra accumulator parameter is passed an updated value of the current result."}),"\n",(0,a.jsx)(s.p,{children:"As another example, consider a function to reverse the order of the elements of a list.\nDoing this directly by recursion is difficult, because we would need to take the head element and somehow put it at the far end of the recursively reversed tail of the list; it is inefficient to access the last position in a list, because we only have direct access to the first position (the head) and we would need to traverse and copy the entire list to add something at the other end.\nHowever, if we use an accumulator to collect up the reversed list from left to right, the process is easy:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:'def reverse[A](data: List[A]): List[A] = {\n  def aux(rest: List[A], accum: List[A]): List[A] = {\n    rest match\n      case Nil => accum\n      case head :: tail => aux(tail, head :: accum)\n  }\n\n  aux(data, Nil)\n}\n\nreverse(List("This", "is", "a", "test"))\n// res5: List[String] = List("test", "a", "is", "This")\n'})}),"\n",(0,a.jsxs)(s.p,{children:["We can often find recursive approaches to problems that are ",(0,a.jsx)(s.em,{children:"almost"})," correct, except the input or the output needs to be reversed.\nNow that we have an efficient ",(0,a.jsx)(s.code,{children:"reverse"})," function, that runs in time proportional to the length of the list, we can solve these problems.\nFor example, here is a function that can efficiently append two lists, using an accumulator (note that it uses the same helper function as in ",(0,a.jsx)(s.code,{children:"reverse"}),"!",(0,a.jsx)(s.sup,{children:(0,a.jsx)(s.a,{href:"#user-content-fn-4",id:"user-content-fnref-4","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"4"})}),"):"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:"def append[A](data1: List[A], data2: List[A]): List[A] = {\n  def aux(rest: List[A], accum: List[A]): List[A] = {\n    rest match\n      case Nil => accum\n      case head :: tail => aux(tail, head :: accum)\n  }\n\n  aux(reverse(data1), data2)\n}\n\nappend(List(3, 1, 4, 1, 5), List(9, 2, 6, 5))\n// res6: List[Int] = List(3, 1, 4, 1, 5, 9, 2, 6, 5)\n"})}),"\n",(0,a.jsx)(s.h2,{id:"tail-recursion",children:"Tail Recursion"}),"\n",(0,a.jsx)(s.p,{children:"(This section assumes that you know a little bit about how function calls are implemented, by pushing a return address, parameter values, and space for local storage onto a call stack.\nWhen a function returns, it goes back to the saved address\u2014typically the next instruction after the function call\u2014and pops the parameters and locals, including the return value, off of the stack.)"}),"\n",(0,a.jsxs)(s.p,{children:["Each of the examples above of using accumulators has an interesting property: the recursive call to the helper function is in what is called ",(0,a.jsx)(s.strong,{children:"tail position"}),".\nThat is, the value of the function in the recursive case is just the result of the recursive call\u2014there is no other operation that needs to be performed after returning from a call to ",(0,a.jsx)(s.code,{children:"aux"}),"."]}),"\n",(0,a.jsxs)(s.p,{children:["If a function can be written in this ",(0,a.jsx)(s.strong,{children:"tail recursive"})," style, then the compiler is able to perform an important optimization: instead of generating a new function call for each recursive invocation, it can just compile a jump back to the top of the function with new values for the local parameters.\nWhen the function finally returns (typically in a base case, such as where the examples above return the value of the accumulator), rather than having to return through a potentially long sequence of function calls saved on the call stack, it just returns directly to the original caller of the function.\nThis has two significant benefits: since function calls tend to be expensive in terms of machine operations, it saves some time; more importantly, it also avoids building up a large number of saved calls on the stack.\nSince the function call stack is frequently limited in size, this optimization can allow a recursive function to call itself thousands or even millions of times without worrying about stack overflow."]}),"\n",(0,a.jsxs)(s.p,{children:["In this special case, the code generated for a recursive function will be essentially the same as would have been generated for a loop in an imperative language, so we can regain all of the speed potential of a language like C or Java while still having the flexibility and algebraic reasoning style provided by working with pure functions.\nAs an example, compare the ",(0,a.jsx)(s.code,{children:"sum"})," function written in Scala with equivalent Java code:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:"def sum(f: Int => Int, a: Int, b: Int): Int = {\n  @scala.annotation.tailrec\n  def aux(i: Int, accum: Int): Int = {\n    if i > b then accum\n    else aux(i + 1, accum + f(i))\n  }\n\n  aux(a, 0)\n}\n\nsum(i => i, 1, 10000)\n// res8: Int = 50005000\n"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:"public int sum(Function<Integer, Integer> f, int a, int b) {\n  int i = a;\n  int accum = 0;\n  while (i <= b) {\n    accum += f.apply(i);\n    i++;\n  }\n  return accum;\n}\n"})}),"\n",(0,a.jsxs)(s.p,{children:["These will generate essentially the same machine code, but note that in the case of Java we need to be careful about the order in which the varaibles are changed: if I had swapped the order of the statements in the loop it would not have been correct.\nIn the Scala version, we may think of the index variable (",(0,a.jsx)(s.code,{children:"i"}),') and the accumulator as both being updated simultaneously when it "jumps back to the top of the loop" (when it makes the tail-recursive call), so the code is easier to reason about and modify.']}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:"aux"})," function in this example is preceded by the annotation ",(0,a.jsx)(s.code,{children:"@scala.annotation.tailrec"}),"\u2014this is a notice to the compiler that we expect it to perform the tail-call optimization, and it should give us an error if the function is not in fact tail-recursive."]}),"\n",(0,a.jsx)(s.h2,{id:"exercises",children:"Exercises"}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:["Use a combination of ",(0,a.jsx)(s.code,{children:"map"})," and ",(0,a.jsx)(s.code,{children:"reduce"})," to define a function that will compute the length of a vector, given as a list of doubles.\nThe length of the vector ",(0,a.jsxs)(s.span,{className:"katex",children:[(0,a.jsx)(s.span,{className:"katex-mathml",children:(0,a.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(s.semantics,{children:[(0,a.jsxs)(s.mrow,{children:[(0,a.jsx)(s.mi,{children:"L"}),(0,a.jsx)(s.mi,{children:"i"}),(0,a.jsx)(s.mi,{children:"s"}),(0,a.jsx)(s.mi,{children:"t"}),(0,a.jsx)(s.mo,{stretchy:"false",children:"("}),(0,a.jsxs)(s.msub,{children:[(0,a.jsx)(s.mi,{children:"x"}),(0,a.jsx)(s.mn,{children:"1"})]}),(0,a.jsx)(s.mo,{separator:"true",children:","}),(0,a.jsxs)(s.msub,{children:[(0,a.jsx)(s.mi,{children:"x"}),(0,a.jsx)(s.mn,{children:"2"})]}),(0,a.jsx)(s.mo,{separator:"true",children:","}),(0,a.jsx)(s.mo,{children:"\u2026"}),(0,a.jsx)(s.mo,{separator:"true",children:","}),(0,a.jsxs)(s.msub,{children:[(0,a.jsx)(s.mi,{children:"x"}),(0,a.jsx)(s.mi,{children:"n"})]}),(0,a.jsx)(s.mo,{stretchy:"false",children:")"})]}),(0,a.jsx)(s.annotation,{encoding:"application/x-tex",children:"List(x_1, x_2, \\ldots, x_n)"})]})})}),(0,a.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(s.span,{className:"base",children:[(0,a.jsx)(s.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(s.span,{className:"mord mathnormal",children:"L"}),(0,a.jsx)(s.span,{className:"mord mathnormal",children:"i"}),(0,a.jsx)(s.span,{className:"mord mathnormal",children:"s"}),(0,a.jsx)(s.span,{className:"mord mathnormal",children:"t"}),(0,a.jsx)(s.span,{className:"mopen",children:"("}),(0,a.jsxs)(s.span,{className:"mord",children:[(0,a.jsx)(s.span,{className:"mord mathnormal",children:"x"}),(0,a.jsx)(s.span,{className:"msupsub",children:(0,a.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,a.jsxs)(s.span,{className:"vlist-r",children:[(0,a.jsx)(s.span,{className:"vlist",style:{height:"0.3011em"},children:(0,a.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,a.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(s.span,{className:"mord mtight",children:"1"})})]})}),(0,a.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,a.jsx)(s.span,{className:"vlist-r",children:(0,a.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,a.jsx)(s.span,{})})})]})})]}),(0,a.jsx)(s.span,{className:"mpunct",children:","}),(0,a.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,a.jsxs)(s.span,{className:"mord",children:[(0,a.jsx)(s.span,{className:"mord mathnormal",children:"x"}),(0,a.jsx)(s.span,{className:"msupsub",children:(0,a.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,a.jsxs)(s.span,{className:"vlist-r",children:[(0,a.jsx)(s.span,{className:"vlist",style:{height:"0.3011em"},children:(0,a.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,a.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(s.span,{className:"mord mtight",children:"2"})})]})}),(0,a.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,a.jsx)(s.span,{className:"vlist-r",children:(0,a.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,a.jsx)(s.span,{})})})]})})]}),(0,a.jsx)(s.span,{className:"mpunct",children:","}),(0,a.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,a.jsx)(s.span,{className:"minner",children:"\u2026"}),(0,a.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,a.jsx)(s.span,{className:"mpunct",children:","}),(0,a.jsx)(s.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,a.jsxs)(s.span,{className:"mord",children:[(0,a.jsx)(s.span,{className:"mord mathnormal",children:"x"}),(0,a.jsx)(s.span,{className:"msupsub",children:(0,a.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,a.jsxs)(s.span,{className:"vlist-r",children:[(0,a.jsx)(s.span,{className:"vlist",style:{height:"0.1514em"},children:(0,a.jsxs)(s.span,{style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,a.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(s.span,{className:"mord mathnormal mtight",children:"n"})})]})}),(0,a.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,a.jsx)(s.span,{className:"vlist-r",children:(0,a.jsx)(s.span,{className:"vlist",style:{height:"0.15em"},children:(0,a.jsx)(s.span,{})})})]})})]}),(0,a.jsx)(s.span,{className:"mclose",children:")"})]})})]})," is ",(0,a.jsxs)(s.span,{className:"katex",children:[(0,a.jsx)(s.span,{className:"katex-mathml",children:(0,a.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(s.semantics,{children:[(0,a.jsx)(s.mrow,{children:(0,a.jsx)(s.msqrt,{children:(0,a.jsxs)(s.mrow,{children:[(0,a.jsxs)(s.msubsup,{children:[(0,a.jsx)(s.mi,{children:"x"}),(0,a.jsx)(s.mn,{children:"1"}),(0,a.jsx)(s.mn,{children:"2"})]}),(0,a.jsx)(s.mo,{children:"+"}),(0,a.jsxs)(s.msubsup,{children:[(0,a.jsx)(s.mi,{children:"x"}),(0,a.jsx)(s.mn,{children:"2"}),(0,a.jsx)(s.mn,{children:"2"})]}),(0,a.jsx)(s.mo,{children:"+"}),(0,a.jsx)(s.mo,{children:"\u22ef"}),(0,a.jsx)(s.mo,{children:"+"}),(0,a.jsxs)(s.msubsup,{children:[(0,a.jsx)(s.mi,{children:"x"}),(0,a.jsx)(s.mi,{children:"n"}),(0,a.jsx)(s.mn,{children:"2"})]})]})})}),(0,a.jsx)(s.annotation,{encoding:"application/x-tex",children:"\\sqrt{x_1^2 + x_2^2 + \\cdots + x_n^2}"})]})})}),(0,a.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(s.span,{className:"base",children:[(0,a.jsx)(s.span,{className:"strut",style:{height:"1.24em",verticalAlign:"-0.2902em"}}),(0,a.jsx)(s.span,{className:"mord sqrt",children:(0,a.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,a.jsxs)(s.span,{className:"vlist-r",children:[(0,a.jsxs)(s.span,{className:"vlist",style:{height:"0.9498em"},children:[(0,a.jsxs)(s.span,{className:"svg-align",style:{top:"-3.2em"},children:[(0,a.jsx)(s.span,{className:"pstrut",style:{height:"3.2em"}}),(0,a.jsxs)(s.span,{className:"mord",style:{paddingLeft:"1em"},children:[(0,a.jsxs)(s.span,{className:"mord",children:[(0,a.jsx)(s.span,{className:"mord mathnormal",children:"x"}),(0,a.jsx)(s.span,{className:"msupsub",children:(0,a.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,a.jsxs)(s.span,{className:"vlist-r",children:[(0,a.jsxs)(s.span,{className:"vlist",style:{height:"0.7959em"},children:[(0,a.jsxs)(s.span,{style:{top:"-2.4337em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,a.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(s.span,{className:"mord mtight",children:"1"})})]}),(0,a.jsxs)(s.span,{style:{top:"-3.0448em",marginRight:"0.05em"},children:[(0,a.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(s.span,{className:"mord mtight",children:"2"})})]})]}),(0,a.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,a.jsx)(s.span,{className:"vlist-r",children:(0,a.jsx)(s.span,{className:"vlist",style:{height:"0.2663em"},children:(0,a.jsx)(s.span,{})})})]})})]}),(0,a.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,a.jsx)(s.span,{className:"mbin",children:"+"}),(0,a.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,a.jsxs)(s.span,{className:"mord",children:[(0,a.jsx)(s.span,{className:"mord mathnormal",children:"x"}),(0,a.jsx)(s.span,{className:"msupsub",children:(0,a.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,a.jsxs)(s.span,{className:"vlist-r",children:[(0,a.jsxs)(s.span,{className:"vlist",style:{height:"0.7959em"},children:[(0,a.jsxs)(s.span,{style:{top:"-2.4337em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,a.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(s.span,{className:"mord mtight",children:"2"})})]}),(0,a.jsxs)(s.span,{style:{top:"-3.0448em",marginRight:"0.05em"},children:[(0,a.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(s.span,{className:"mord mtight",children:"2"})})]})]}),(0,a.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,a.jsx)(s.span,{className:"vlist-r",children:(0,a.jsx)(s.span,{className:"vlist",style:{height:"0.2663em"},children:(0,a.jsx)(s.span,{})})})]})})]}),(0,a.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,a.jsx)(s.span,{className:"mbin",children:"+"}),(0,a.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,a.jsx)(s.span,{className:"minner",children:"\u22ef"}),(0,a.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,a.jsx)(s.span,{className:"mbin",children:"+"}),(0,a.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,a.jsxs)(s.span,{className:"mord",children:[(0,a.jsx)(s.span,{className:"mord mathnormal",children:"x"}),(0,a.jsx)(s.span,{className:"msupsub",children:(0,a.jsxs)(s.span,{className:"vlist-t vlist-t2",children:[(0,a.jsxs)(s.span,{className:"vlist-r",children:[(0,a.jsxs)(s.span,{className:"vlist",style:{height:"0.7401em"},children:[(0,a.jsxs)(s.span,{style:{top:"-2.453em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,a.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(s.span,{className:"mord mathnormal mtight",children:"n"})})]}),(0,a.jsxs)(s.span,{style:{top:"-2.989em",marginRight:"0.05em"},children:[(0,a.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(s.span,{className:"mord mtight",children:"2"})})]})]}),(0,a.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,a.jsx)(s.span,{className:"vlist-r",children:(0,a.jsx)(s.span,{className:"vlist",style:{height:"0.247em"},children:(0,a.jsx)(s.span,{})})})]})})]})]})]}),(0,a.jsxs)(s.span,{style:{top:"-2.9098em"},children:[(0,a.jsx)(s.span,{className:"pstrut",style:{height:"3.2em"}}),(0,a.jsx)(s.span,{className:"hide-tail",style:{minWidth:"1.02em",height:"1.28em"},children:(0,a.jsx)(s.svg,{xmlns:"http://www.w3.org/2000/svg",width:"400em",height:"1.28em",viewBox:"0 0 400000 1296",preserveAspectRatio:"xMinYMin slice",children:(0,a.jsx)(s.path,{d:"M263,681c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl0 -0\nc4.7,-7.3,11,-11,19,-11\nH40000v40H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM1001 80h400000v40h-400000z"})})})]})]}),(0,a.jsx)(s.span,{className:"vlist-s",children:"\u200b"})]}),(0,a.jsx)(s.span,{className:"vlist-r",children:(0,a.jsx)(s.span,{className:"vlist",style:{height:"0.2902em"},children:(0,a.jsx)(s.span,{})})})]})})]})})]}),".\nThe square root function in Scala is ",(0,a.jsx)(s.code,{children:"math.sqrt"}),". For example, ",(0,a.jsx)(s.code,{children:"length(List(3.0, 4.0, 12.0))"})," should be ",(0,a.jsx)(s.code,{children:"13.0"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsx)("summary",{children:"Answer"}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:"def length(vec: List[Double]): Double = {\n  math.sqrt(reduce((x: Double, y: Double) => x + y, 0.0, map((x: Double) => x * x, vec)))\n}\n"})})]}),"\n",(0,a.jsxs)(s.ol,{start:"2",children:["\n",(0,a.jsxs)(s.li,{children:["Define a version of ",(0,a.jsx)(s.code,{children:"reduce"})," that folds up the result ",(0,a.jsx)(s.em,{children:"from the right"}),".\nThat is, ",(0,a.jsx)(s.code,{children:"reduceRight(g, init, xs)"})," should compute ",(0,a.jsx)(s.code,{children:"g(x1, g(x2, ...g(xn, init)...))"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsx)("summary",{children:"Answer"}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:"def reduceRight[A, B](g: (A, B) => B, init: B, xs: List[A]): B = {\n  xs match\n    case Nil => init\n    case head :: tail => g(head, reduceRight(g, init, tail))\n}\n"})}),(0,a.jsxs)(s.p,{children:["Note that this function is not tail-recursive, while the left-to-right ",(0,a.jsx)(s.code,{children:"reduce"})," is. See if you can write a tail-recursive version (",(0,a.jsxs)(s.em,{children:["Hint: use ",(0,a.jsx)(s.code,{children:"reverse"})]}),")."]})]}),"\n",(0,a.jsxs)(s.ol,{start:"3",children:["\n",(0,a.jsxs)(s.li,{children:["Given the function ",(0,a.jsx)(s.code,{children:"cons"})," such that ",(0,a.jsx)(s.code,{children:"cons(head, tail)"})," is ",(0,a.jsx)(s.code,{children:"head :: tail"}),", what is the result of ",(0,a.jsx)(s.code,{children:"reduceRight(cons, Nil, xs)"}),"? What is the result of ",(0,a.jsx)(s.code,{children:"reduce(snoc, Nil, xs)"}),", where ",(0,a.jsx)(s.code,{children:"snoc(tail, head)"})," is the same as ",(0,a.jsx)(s.code,{children:"cons(head, tail)"}),"?"]}),"\n"]}),"\n",(0,a.jsxs)(n,{children:[(0,a.jsx)("summary",{children:"Answer"}),(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"reduceRight(cons, Nil, xs)"})," is just ",(0,a.jsx)(s.code,{children:"xs"}),", while ",(0,a.jsx)(s.code,{children:"reduce(snoc, Nil, xs)"})," is ",(0,a.jsx)(s.code,{children:"reverse(xs)"}),"."]})]}),"\n","\n",(0,a.jsxs)(s.section,{"data-footnotes":!0,className:"footnotes",children:[(0,a.jsx)(s.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{id:"user-content-fn-1",children:["\n",(0,a.jsxs)(s.p,{children:["Google's MapReduce is actually expressed in terms of collections of values paired with ",(0,a.jsx)(s.em,{children:"keys"})," that are used to distribute and collect related data; the simplification here is that we are essentially giving every value the same key, so the summary produced by ",(0,a.jsx)(s.code,{children:"reduce"})," will be a single item. ",(0,a.jsx)(s.a,{href:"#user-content-fnref-1","data-footnote-backref":"","aria-label":"Back to reference 1",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{id:"user-content-fn-2",children:["\n",(0,a.jsxs)(s.p,{children:["This version of reduce is also known as a ",(0,a.jsx)(s.strong,{children:"left fold"})," because it repeatedly folds up the list into a result, working from left to right. ",(0,a.jsx)(s.a,{href:"#user-content-fnref-2","data-footnote-backref":"","aria-label":"Back to reference 2",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{id:"user-content-fn-3",children:["\n",(0,a.jsxs)(s.p,{children:["Equivalently, every word except the ",(0,a.jsx)(s.em,{children:"last"})," needs to be followed by a comma; this observation suggests that another solution is to handle single-word lists as separate base case. ",(0,a.jsx)(s.a,{href:"#user-content-fnref-3","data-footnote-backref":"","aria-label":"Back to reference 3",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{id:"user-content-fn-4",children:["\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:"aux"})," function here is sometimes called ",(0,a.jsx)(s.code,{children:"reverse_append"}),", since when applied to lists ",(0,a.jsx)(s.code,{children:"data1"})," and ",(0,a.jsx)(s.code,{children:"data2"})," it produces ",(0,a.jsx)(s.code,{children:"append(reverse(data1), data2)"}),". The Scala library provides it as a method on the List class called ",(0,a.jsx)(s.code,{children:"reverse_:::"})," (and ",(0,a.jsx)(s.code,{children:"append"})," itself is the operator ",(0,a.jsx)(s.code,{children:":::"}),"). ",(0,a.jsx)(s.a,{href:"#user-content-fnref-4","data-footnote-backref":"","aria-label":"Back to reference 4",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n"]}),"\n"]})]})}function d(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>r});var a=n(6540);const t={},i=a.createContext(t);function l(e){const s=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),a.createElement(i.Provider,{value:s},e.children)}}}]);